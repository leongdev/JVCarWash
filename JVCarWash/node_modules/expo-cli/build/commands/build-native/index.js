"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildAction = buildAction;
exports.default = _default;

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _easJson() {
  const data = require("../../easJson");

  _easJson = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _projects() {
  const data = require("../../projects");

  _projects = function () {
    return data;
  };

  return data;
}

function _AndroidBuilder() {
  const data = _interopRequireDefault(require("./AndroidBuilder"));

  _AndroidBuilder = function () {
    return data;
  };

  return data;
}

function _build() {
  const data = require("./build");

  _build = function () {
    return data;
  };

  return data;
}

function _iOSBuilder() {
  const data = _interopRequireDefault(require("./iOSBuilder"));

  _iOSBuilder = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("./utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BuildPlatform;

(function (BuildPlatform) {
  BuildPlatform["ANDROID"] = "android";
  BuildPlatform["IOS"] = "ios";
  BuildPlatform["ALL"] = "all";
})(BuildPlatform || (BuildPlatform = {}));

async function startBuildsAsync(ctx, projectId, platform) {
  const client = _xdl().ApiV2.clientForUser(ctx.user);

  const scheduledBuilds = [];

  if ([BuildPlatform.ANDROID, BuildPlatform.ALL].includes(platform)) {
    const builder = new (_AndroidBuilder().default)(ctx);
    const buildId = await (0, _build().startBuildAsync)(client, builder, projectId);
    scheduledBuilds.push({
      platform: BuildPlatform.ANDROID,
      buildId
    });
  }

  if ([BuildPlatform.IOS, BuildPlatform.ALL].includes(platform)) {
    const builder = new (_iOSBuilder().default)(ctx);
    const buildId = await (0, _build().startBuildAsync)(client, builder, projectId);
    scheduledBuilds.push({
      platform: BuildPlatform.IOS,
      buildId
    });
  }

  return scheduledBuilds;
}

async function buildAction(projectDir, options) {
  const platforms = Object.values(BuildPlatform);
  const {
    platform,
    profile
  } = options;

  if (!platform || !platforms.includes(platform)) {
    throw new Error(`-p/--platform is required, valid platforms: ${platforms.map(p => _log().default.chalk.bold(p)).join(', ')}`);
  }

  const easConfig = await new (_easJson().EasJsonReader)(projectDir, platform).readAsync(profile);
  const ctx = await (0, _build().createBuilderContextAsync)(projectDir, easConfig);
  const projectId = await (0, _projects().ensureProjectExistsAsync)(ctx.user, {
    accountName: ctx.accountName,
    projectName: ctx.projectName
  });
  const scheduledBuilds = await startBuildsAsync(ctx, projectId, options.platform);
  (0, _utils().printLogsUrls)(ctx.accountName, scheduledBuilds);

  if (options.wait) {
    const buildInfo = await (0, _build().waitForBuildEndAsync)(ctx, projectId, scheduledBuilds.map(i => i.buildId));
    (0, _utils().printBuildResults)(buildInfo);
  }
}

async function statusAction(projectDir, {
  platform,
  status,
  buildId
}) {
  var _builds;

  if (buildId) {
    if (platform) {
      throw new Error('-p/--platform cannot be specified if --build-id is specified.');
    }

    if (status) {
      throw new Error('-s/--status cannot be specified if --build-id is specified.');
    }
  } else {
    const platforms = Object.values(BuildPlatform);
    const statuses = Object.values(_build().BuildStatus);

    if (platform && !platforms.includes(platform)) {
      throw new Error(`-p/--platform needs to be one of: ${platforms.map(p => _log().default.chalk.bold(p)).join(', ')}`);
    }

    if (status && !statuses.includes(status)) {
      throw new Error(`-s/--status needs to be one of: ${statuses.map(s => _log().default.chalk.bold(s)).join(', ')}`);
    }
  }

  const user = await _xdl().UserManager.ensureLoggedInAsync();
  const {
    exp
  } = (0, _config().getConfig)(projectDir);
  const accountName = exp.owner || user.username;
  const projectName = exp.slug;
  const projectId = await (0, _projects().ensureProjectExistsAsync)(user, {
    accountName,
    projectName
  });

  const client = _xdl().ApiV2.clientForUser(user);

  const spinner = (0, _ora().default)().start('Fetching build history...');
  let builds;

  try {
    if (buildId) {
      const buildStatus = await client.getAsync(`projects/${projectId}/builds/${buildId}`);
      builds = buildStatus ? [buildStatus] : undefined;
    } else {
      const params = { ...([BuildPlatform.ANDROID, BuildPlatform.IOS].includes(platform) ? {
          platform
        } : null),
        ...(status ? {
          status
        } : null)
      };
      const buildStatus = await client.getAsync(`projects/${projectId}/builds`, params);
      builds = buildStatus === null || buildStatus === void 0 ? void 0 : buildStatus.builds;
    }
  } catch (e) {
    spinner.fail(e.message);
    throw new Error('Error getting current build status for this project.');
  }

  if (!((_builds = builds) === null || _builds === void 0 ? void 0 : _builds.length)) {
    spinner.succeed('No currently active or previous builds for this project.');
  } else {
    spinner.succeed(`Found ${builds.length} builds for this project.`);
    (0, _utils().printBuildTable)(builds);
  }
}

function _default(program) {
  program.command('build [project-dir]').description('Build an app binary for your project, signed and ready for submission to the Google Play Store.').allowUnknownOption().option('-p --platform <platform>').option('--skip-credentials-check', 'Skip checking credentials', false).option('--no-wait', 'Exit immediately after scheduling build', false).option('--profile <profile>', 'Build profile', 'release').asyncActionProjectDir(buildAction, {
    checkConfig: true
  });
  program.command('build-status [project-dir]').option('-p --platform <platform>', 'Get builds for specified platforms: ios, android, all', /^(all|android|ios)$/i).option('-s --status <status>', 'Get builds with the specified status: in-queue, in-progress, errored, finished', /^(in-queue|in-progress|errored|finished)$/).option('-b --build-id <build-id>', 'Get the build with a specific build id').description(`Get the status of the latest builds for your project.`).asyncActionProjectDir(statusAction, {
    checkConfig: true
  });
}
//# sourceMappingURL=index.js.map