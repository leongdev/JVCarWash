{"version":3,"sources":["../../../src/commands/build-native/index.ts"],"names":["BuildPlatform","startBuildsAsync","ctx","projectId","platform","client","ApiV2","clientForUser","user","scheduledBuilds","ANDROID","ALL","includes","builder","AndroidBuilder","buildId","push","IOS","iOSBuilder","buildAction","projectDir","options","platforms","Object","values","profile","Error","map","p","log","chalk","bold","join","easConfig","EasJsonReader","readAsync","accountName","projectName","wait","buildInfo","i","statusAction","status","statuses","BuildStatus","s","UserManager","ensureLoggedInAsync","exp","owner","username","slug","spinner","start","builds","buildStatus","getAsync","undefined","params","e","fail","message","length","succeed","program","command","description","allowUnknownOption","option","asyncActionProjectDir","checkConfig"],"mappings":"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","sourcesContent":["import { ProjectConfig, getConfig } from '@expo/config';\nimport { ApiV2, User, UserManager } from '@expo/xdl';\nimport { Command } from 'commander';\nimport ora from 'ora';\n\nimport { EasConfig, EasJsonReader } from '../../easJson';\nimport log from '../../log';\nimport { ensureProjectExistsAsync } from '../../projects';\nimport AndroidBuilder from './AndroidBuilder';\nimport {\n  BuildInfo,\n  BuildStatus,\n  BuilderContext,\n  createBuilderContextAsync,\n  startBuildAsync,\n  waitForBuildEndAsync,\n} from './build';\nimport iOSBuilder from './iOSBuilder';\nimport { printBuildResults, printBuildTable, printLogsUrls } from './utils';\n\nenum BuildPlatform {\n  ANDROID = 'android',\n  IOS = 'ios',\n  ALL = 'all',\n}\n\ninterface BuildOptions {\n  platform: BuildPlatform;\n  skipCredentialsCheck?: boolean; // TODO: noop for now\n  wait?: boolean;\n  profile: string;\n}\n\ninterface StatusOptions {\n  platform: BuildPlatform;\n  buildId?: string;\n  status?: BuildStatus;\n}\n\nasync function startBuildsAsync(\n  ctx: BuilderContext,\n  projectId: string,\n  platform: BuildOptions['platform']\n): Promise<{ platform: BuildPlatform.ANDROID | BuildPlatform.IOS; buildId: string }[]> {\n  const client = ApiV2.clientForUser(ctx.user);\n  const scheduledBuilds: {\n    platform: BuildPlatform.ANDROID | BuildPlatform.IOS;\n    buildId: string;\n  }[] = [];\n  if ([BuildPlatform.ANDROID, BuildPlatform.ALL].includes(platform)) {\n    const builder = new AndroidBuilder(ctx);\n    const buildId = await startBuildAsync(client, builder, projectId);\n    scheduledBuilds.push({ platform: BuildPlatform.ANDROID, buildId });\n  }\n  if ([BuildPlatform.IOS, BuildPlatform.ALL].includes(platform)) {\n    const builder = new iOSBuilder(ctx);\n    const buildId = await startBuildAsync(client, builder, projectId);\n    scheduledBuilds.push({ platform: BuildPlatform.IOS, buildId });\n  }\n  return scheduledBuilds;\n}\n\nexport async function buildAction(projectDir: string, options: BuildOptions): Promise<void> {\n  const platforms = Object.values(BuildPlatform);\n\n  const { platform, profile } = options;\n  if (!platform || !platforms.includes(platform)) {\n    throw new Error(\n      `-p/--platform is required, valid platforms: ${platforms\n        .map(p => log.chalk.bold(p))\n        .join(', ')}`\n    );\n  }\n  const easConfig: EasConfig = await new EasJsonReader(projectDir, platform).readAsync(profile);\n  const ctx = await createBuilderContextAsync(projectDir, easConfig);\n  const projectId = await ensureProjectExistsAsync(ctx.user, {\n    accountName: ctx.accountName,\n    projectName: ctx.projectName,\n  });\n  const scheduledBuilds = await startBuildsAsync(ctx, projectId, options.platform);\n  printLogsUrls(ctx.accountName, scheduledBuilds);\n\n  if (options.wait) {\n    const buildInfo = await waitForBuildEndAsync(\n      ctx,\n      projectId,\n      scheduledBuilds.map(i => i.buildId)\n    );\n    printBuildResults(buildInfo);\n  }\n}\n\nasync function statusAction(\n  projectDir: string,\n  { platform, status, buildId }: StatusOptions\n): Promise<void> {\n  if (buildId) {\n    if (platform) {\n      throw new Error('-p/--platform cannot be specified if --build-id is specified.');\n    }\n\n    if (status) {\n      throw new Error('-s/--status cannot be specified if --build-id is specified.');\n    }\n  } else {\n    const platforms = Object.values(BuildPlatform);\n    const statuses = Object.values(BuildStatus);\n\n    if (platform && !platforms.includes(platform)) {\n      throw new Error(\n        `-p/--platform needs to be one of: ${platforms.map(p => log.chalk.bold(p)).join(', ')}`\n      );\n    }\n\n    if (status && !statuses.includes(status)) {\n      throw new Error(\n        `-s/--status needs to be one of: ${statuses.map(s => log.chalk.bold(s)).join(', ')}`\n      );\n    }\n  }\n\n  const user: User = await UserManager.ensureLoggedInAsync();\n  const { exp }: ProjectConfig = getConfig(projectDir);\n\n  const accountName = exp.owner || user.username;\n  const projectName = exp.slug;\n\n  const projectId = await ensureProjectExistsAsync(user, {\n    accountName,\n    projectName,\n  });\n\n  const client = ApiV2.clientForUser(user);\n\n  const spinner = ora().start('Fetching build history...');\n\n  let builds: BuildInfo[] | undefined;\n\n  try {\n    if (buildId) {\n      const buildStatus = await client.getAsync(`projects/${projectId}/builds/${buildId}`);\n      builds = buildStatus ? [buildStatus] : undefined;\n    } else {\n      const params = {\n        ...([BuildPlatform.ANDROID, BuildPlatform.IOS].includes(platform) ? { platform } : null),\n        ...(status ? { status } : null),\n      };\n\n      const buildStatus = await client.getAsync(`projects/${projectId}/builds`, params);\n      builds = buildStatus?.builds;\n    }\n  } catch (e) {\n    spinner.fail(e.message);\n    throw new Error('Error getting current build status for this project.');\n  }\n\n  if (!builds?.length) {\n    spinner.succeed('No currently active or previous builds for this project.');\n  } else {\n    spinner.succeed(`Found ${builds.length} builds for this project.`);\n    printBuildTable(builds);\n  }\n}\n\nexport default function (program: Command) {\n  program\n    .command('build [project-dir]')\n    .description(\n      'Build an app binary for your project, signed and ready for submission to the Google Play Store.'\n    )\n    .allowUnknownOption()\n    .option('-p --platform <platform>')\n    .option('--skip-credentials-check', 'Skip checking credentials', false)\n    .option('--no-wait', 'Exit immediately after scheduling build', false)\n    .option('--profile <profile>', 'Build profile', 'release')\n    .asyncActionProjectDir(buildAction, { checkConfig: true });\n\n  program\n    .command('build-status [project-dir]')\n    .option(\n      '-p --platform <platform>',\n      'Get builds for specified platforms: ios, android, all',\n      /^(all|android|ios)$/i\n    )\n    .option(\n      '-s --status <status>',\n      'Get builds with the specified status: in-queue, in-progress, errored, finished',\n      /^(in-queue|in-progress|errored|finished)$/\n    )\n    .option('-b --build-id <build-id>', 'Get the build with a specific build id')\n    .description(`Get the status of the latest builds for your project.`)\n    .asyncActionProjectDir(statusAction, { checkConfig: true });\n}\n"],"file":"index.js"}