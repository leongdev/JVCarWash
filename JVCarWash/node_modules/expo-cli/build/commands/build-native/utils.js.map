{"version":3,"sources":["../../../src/commands/build-native/utils.ts"],"names":["makeProjectTarballAsync","tarPath","spinner","start","changes","stdout","length","fail","Error","succeed","size","fs","stat","printBuildTable","builds","headers","colWidths","refactoredBuilds","map","build","buildUrl","artifacts","started","Intl","DateTimeFormat","year","month","day","hour","minute","format","Date","createdAt","platform","status","replace","artifact","log","terminalLink","slice","buildTable","console","printLogsUrls","accountName","user","UserManager","ensureLoggedInAsync","buildId","logsUrl","UrlUtils","constructBuildLogsUrl","username","v2","forEach","printBuildResults","buildInfo","filter","i"],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport { UserManager } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport ora from 'ora';\n\nimport log from '../../log';\nimport { printTableJsonArray } from '../utils/cli-table';\nimport * as UrlUtils from '../utils/url';\nimport { BuildInfo } from './build';\n\nasync function makeProjectTarballAsync(tarPath: string) {\n  const spinner = ora('Making project tarball').start();\n  const changes = (await spawnAsync('git', ['status', '-s'])).stdout;\n  if (changes.length > 0) {\n    spinner.fail('Could not make project tarball');\n    throw new Error('Please commit all files before trying to build your project. Aborting...');\n  }\n  await spawnAsync('git', [\n    'archive',\n    '--format=tar.gz',\n    '--prefix',\n    'project/',\n    '-o',\n    tarPath,\n    'HEAD',\n  ]);\n  spinner.succeed('Project tarball created.');\n\n  const { size } = await fs.stat(tarPath);\n  return size;\n}\n\nfunction printBuildTable(builds: BuildInfo[]) {\n  const headers = ['started', 'platform', 'status', 'artifact'];\n  const colWidths = [24, 10, 13, 41];\n\n  const refactoredBuilds = builds.map(build => {\n    const buildUrl = build.artifacts?.buildUrl;\n\n    return {\n      started: new Intl.DateTimeFormat('en', {\n        year: 'numeric',\n        month: 'short',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n      }).format(new Date(build.createdAt)),\n      platform: build.platform,\n      status: build.status.replace(/-/g, ' '),\n      artifact: buildUrl\n        ? // Trim the URL here, otherwise if printTableJsonArray trims it, it incorrectly removes the escape to end the link\n          // Which makes everything in the terminal a link after printing the table\n          log.terminalLink(buildUrl.length > 38 ? `${buildUrl.slice(0, 38)}â€¦` : buildUrl, buildUrl)\n        : 'not available',\n    };\n  });\n\n  const buildTable = printTableJsonArray(headers, refactoredBuilds, colWidths);\n\n  console.log(buildTable);\n}\n\nasync function printLogsUrls(\n  accountName: string,\n  builds: { platform: 'android' | 'ios'; buildId: string }[]\n): Promise<void> {\n  const user = await UserManager.ensureLoggedInAsync();\n  if (builds.length === 1) {\n    const { buildId } = builds[0];\n    const logsUrl = UrlUtils.constructBuildLogsUrl({\n      buildId,\n      username: accountName,\n      v2: true,\n    });\n    log(`Logs url: ${logsUrl}`);\n  } else {\n    builds.forEach(({ buildId, platform }) => {\n      const logsUrl = UrlUtils.constructBuildLogsUrl({\n        buildId,\n        username: user.username,\n        v2: true,\n      });\n      log(`Platform: ${platform}, Logs url: ${logsUrl}`);\n    });\n  }\n}\n\nasync function printBuildResults(buildInfo: (BuildInfo | null)[]): Promise<void> {\n  if (buildInfo.length === 1) {\n    log(`Artifact url: ${buildInfo[0]?.artifacts?.buildUrl ?? ''}`);\n  } else {\n    buildInfo\n      .filter(i => i?.status === 'finished')\n      .forEach(build => {\n        log(`Platform: ${build?.platform}, Artifact url: ${build?.artifacts?.buildUrl ?? ''}`);\n      });\n  }\n}\n\nexport { makeProjectTarballAsync, printBuildTable, printLogsUrls, printBuildResults };\n"],"file":"utils.js"}