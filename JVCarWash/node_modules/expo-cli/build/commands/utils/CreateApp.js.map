{"version":3,"sources":["../../../src/commands/utils/CreateApp.ts"],"names":["validateName","name","test","TOLERABLE_FILES","getConflictsForDirectory","projectRoot","tolerableFiles","fs","readdirSync","filter","file","includes","assertFolderEmptyAsync","folderName","path","dirname","overwrite","conflicts","length","log","addNewLineIfNone","nested","chalk","green","newLine","Promise","all","map","conflict","remove","join","installNodeDependenciesAsync","packageManager","flags","silent","options","cwd","yarn","PackageManager","YarnPackageManager","version","versionAsync","nodeLinker","getConfigAsync","semver","satisfies","yarnRc","yamlString","readFileSync","error","code","config","yaml","safeLoad","warn","writeFileSync","safeDump","installAsync","NpmPackageManager","logNewSection","title","spinner","bold","start","getChangeDirectoryPath","cdPath","relative","process","installCocoaPodsAsync","step","platform","succeed","CocoaPodsPackageManager","getenv","boolish","isCLIInstalledAsync","text","render","installCLIAsync","nonInteractive","program","spawnOptions","e","stopAndPersist","symbol","red","message"],"mappings":"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","sourcesContent":["import * as PackageManager from '@expo/package-manager';\nimport program from 'commander';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport yaml from 'js-yaml';\nimport ora from 'ora';\nimport * as path from 'path';\nimport semver from 'semver';\n\nimport log from '../../log';\n\nexport function validateName(name?: string): string | true {\n  if (typeof name !== 'string' || name === '') {\n    return 'The project name can not be empty.';\n  }\n  if (!/^[a-z0-9@.\\-_]+$/i.test(name)) {\n    return 'The project name can only contain URL-friendly characters (alphanumeric and @ . -  _)';\n  }\n  return true;\n}\n\n// Any of these files are allowed to exist in the projectRoot\nconst TOLERABLE_FILES = [\n  // System\n  '.DS_Store',\n  'Thumbs.db',\n  // Git\n  '.git',\n  '.gitattributes',\n  '.gitignore',\n  // Project\n  '.npmignore',\n  '.travis.yml',\n  'LICENSE',\n  'docs',\n  '.idea',\n  // Package manager\n  'npm-debug.log',\n  'yarn-debug.log',\n  'yarn-error.log',\n];\n\nexport function getConflictsForDirectory(\n  projectRoot: string,\n  tolerableFiles: string[] = TOLERABLE_FILES\n): string[] {\n  return fs\n    .readdirSync(projectRoot)\n    .filter((file: string) => !(/\\.iml$/.test(file) || tolerableFiles.includes(file)));\n}\n\nexport async function assertFolderEmptyAsync({\n  projectRoot,\n  folderName = path.dirname(projectRoot),\n  overwrite,\n}: {\n  projectRoot: string;\n  folderName?: string;\n  overwrite: boolean;\n}): Promise<boolean> {\n  const conflicts = getConflictsForDirectory(projectRoot);\n  if (conflicts.length) {\n    log.addNewLineIfNone();\n    log.nested(`The directory ${log.chalk.green(folderName)} has files that might be overwritten:`);\n    log.newLine();\n    for (const file of conflicts) {\n      log.nested(`  ${file}`);\n    }\n\n    if (overwrite) {\n      log.newLine();\n      log.nested(`Removing existing files from ${log.chalk.green(folderName)}`);\n      await Promise.all(conflicts.map(conflict => fs.remove(path.join(projectRoot, conflict))));\n      return true;\n    }\n\n    return false;\n  }\n  return true;\n}\n\nexport async function installNodeDependenciesAsync(\n  projectRoot: string,\n  packageManager: 'yarn' | 'npm',\n  flags: { silent: boolean } = { silent: false }\n) {\n  const options = { cwd: projectRoot, silent: flags.silent };\n  if (packageManager === 'yarn') {\n    const yarn = new PackageManager.YarnPackageManager(options);\n    const version = await yarn.versionAsync();\n    const nodeLinker = await yarn.getConfigAsync('nodeLinker');\n    if (semver.satisfies(version, '>=2.0.0-rc.24') && nodeLinker !== 'node-modules') {\n      const yarnRc = path.join(projectRoot, '.yarnrc.yml');\n      let yamlString = '';\n      try {\n        yamlString = fs.readFileSync(yarnRc, 'utf8');\n      } catch (error) {\n        if (error.code !== 'ENOENT') {\n          throw error;\n        }\n      }\n      const config = yamlString ? yaml.safeLoad(yamlString) : {};\n      config.nodeLinker = 'node-modules';\n      !flags.silent &&\n        log.warn(\n          `Yarn v${version} detected, enabling experimental Yarn v2 support using the node-modules plugin.`\n        );\n      !flags.silent && log(`Writing ${yarnRc}...`);\n      fs.writeFileSync(yarnRc, yaml.safeDump(config));\n    }\n    await yarn.installAsync();\n  } else {\n    await new PackageManager.NpmPackageManager(options).installAsync();\n  }\n}\n\nexport function logNewSection(title: string) {\n  const spinner = ora(log.chalk.bold(title));\n  spinner.start();\n  return spinner;\n}\n\nexport function getChangeDirectoryPath(projectRoot: string): string {\n  const cdPath = path.relative(process.cwd(), projectRoot);\n  if (cdPath.length <= projectRoot.length) {\n    return cdPath;\n  }\n  return projectRoot;\n}\n\nexport async function installCocoaPodsAsync(projectRoot: string) {\n  log.addNewLineIfNone();\n  let step = logNewSection('Installing CocoaPods.');\n  if (process.platform !== 'darwin') {\n    step.succeed('Skipped installing CocoaPods because operating system is not on macOS.');\n    return false;\n  }\n  const packageManager = new PackageManager.CocoaPodsPackageManager({\n    cwd: path.join(projectRoot, 'ios'),\n    log,\n    silent: getenv.boolish('EXPO_DEBUG', true),\n  });\n\n  if (!(await packageManager.isCLIInstalledAsync())) {\n    try {\n      // prompt user -- do you want to install cocoapods right now?\n      step.text = 'CocoaPods CLI not found in your PATH, installing it now.';\n      step.render();\n      await PackageManager.CocoaPodsPackageManager.installCLIAsync({\n        nonInteractive: program.nonInteractive,\n        spawnOptions: packageManager.options,\n      });\n      step.succeed('Installed CocoaPods CLI');\n      step = logNewSection('Running `pod install` in the `ios` directory.');\n    } catch (e) {\n      step.stopAndPersist({\n        symbol: '⚠️ ',\n        text: log.chalk.red(\n          'Unable to install the CocoaPods CLI. Continuing with project sync, you can install CocoaPods afterwards.'\n        ),\n      });\n      if (e.message) {\n        log(`- ${e.message}`);\n      }\n      return false;\n    }\n  }\n\n  try {\n    await packageManager.installAsync();\n    step.succeed('Installed pods and initialized Xcode workspace.');\n    return true;\n  } catch (e) {\n    step.stopAndPersist({\n      symbol: '⚠️ ',\n      text: log.chalk.red(\n        'Something when wrong running `pod install` in the `ios` directory. Continuing with project sync, you can debug this afterwards.'\n      ),\n    });\n    if (e.message) {\n      log(`- ${e.message}`);\n    }\n    return false;\n  }\n}\n"],"file":"CreateApp.js"}