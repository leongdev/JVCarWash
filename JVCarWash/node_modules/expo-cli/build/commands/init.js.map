{"version":3,"sources":["../../src/commands/init.ts"],"names":["FEATURED_TEMPLATES","shortName","name","description","BARE_WORKFLOW_TEMPLATES","isMacOS","process","platform","assertValidName","folderName","validation","CreateApp","validateName","log","error","chalk","red","exit","parseOptions","command","yes","yarn","npm","install","template","undefined","assertFolderEmptyAsync","projectRoot","overwrite","newLine","nested","resolveProjectRootAsync","input","trim","answer","type","message","initial","validate","path","basename","resolve","nonInteractiveHelp","code","green","program","cyan","fs","ensureDir","action","projectDir","options","cwd","resolvedTemplate","console","templateSpec","registry","escapedName","raw","descriptionColumn","Math","max","map","t","length","pageSize","choices","prompt","separator","value","bold","stdout","columns","short","projectName","initialConfig","expo","slug","templateManifest","pacote","manifest","isBare","includes","extractTemplateStep","logNewSection","projectPath","Exp","extractAndPrepareTemplateAppAsync","succeed","e","fail","packageManager","resolvePackageManager","workflow","podsInstalled","needsPodsInstalled","existsSync","join","installNodeDependenciesAsync","installCocoaPodsAsync","cdPath","getChangeDirectoryPath","showPublishBeforeBuildWarning","didConfigureUpdatesProjectFiles","username","UserManager","getCurrentUsernameAsync","configureUpdatesProjectFilesAsync","addNewLineIfNone","logProjectReadyAsync","logNodeInstallWarning","logCocoaPodsWarning","initGitRepoAsync","silent","commit","PackageManager","shouldUseYarn","flags","installJsDepsStep","root","errno","warn","stdio","dim","macOSComment","exp","androidManifestPath","AndroidConfig","Manifest","getProjectAndroidManifestPathAsync","Error","androidManifestJSON","readAndroidManifestAsync","result","Updates","setUpdatesConfig","writeAndroidManifestAsync","supportingDirectory","IosPlist","modifyAsync","expoPlist","IOSConfig","cleanBackupAsync","parentDir","test","dir","isNonExistentOrEmptyDir","validateProjectName","statSync","isDirectory","readdirSync","promptForBareConfig","dirName","validationResult","CommandError","default","filter","promptForManagedConfig","alias","helpGroup","option","asyncAction"],"mappingskBAAkB,GAAG,CACzB,8BADyB,EAEzB;AACEC,EAAAA,SAAS,EAAE,OADb;AAEEC,EAAAA,IAAI,EAAE,qBAFR;AAGEC,EAAAA,WAAW,EAAE;AAHf,CAFyB,EAOzB;AACEF,EAAAA,SAAS,EAAE,oBADb;AAEEC,EAAAA,IAAI,EAAE,gCAFR;AAGEC,EAAAA,WAAW,EAAE;AAHf,CAPyB,EAYzB;AACEF,EAAAA,SAAS,EAAE,mBADb;AAEEC,EAAAA,IAAI,EAAE,oBAFR;AAGEC,EAAAA,WAAW,EAAE;AAHf,CAZyB,EAiBzB,2BAjByB,EAkBzB;AACEF,EAAAA,SAAS,EAAE,SADb;AAEEC,EAAAA,IAAI,EAAE,4BAFR;AAGEC,EAAAA,WAAW,EAAE;AAHf,CAlByB,EAuBzB;AACEF,EAAAA,SAAS,EAAE,sBADb;AAEEC,EAAAA,IAAI,EAAE,+BAFR;AAGEC,EAAAA,WAAW,EAAE;AAHf,CAvByB,CAA3B;AA8BA,MAAMC,uBAAuB,GAAG,CAAC,4BAAD,EAA+B,+BAA/B,CAAhC;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,QAAR,KAAqB,QAArC;;AAEA,SAASC,eAAT,CAAyBC,UAAzB,EAA6C;AAC3C,QAAMC,UAAU,GAAGC,SAAS,GAACC,YAAV,CAAuBH,UAAvB,CAAnB;;AACA,MAAI,OAAOC,UAAP,KAAsB,QAA1B,EAAoC;AAClCG,mBAAIC,KAAJ,CAAW,8BAA6BC,iBAAMC,GAAN,CAAW,IAAGP,UAAW,GAAzB,CAA6B,KAAIC,UAAW,EAApF;;AACAJ,IAAAA,OAAO,CAACW,IAAR,CAAa,CAAb;AACD;AACF;;AAED,SAASC,YAAT,CAAsBC,OAAtB,EAAiD;AAC/C,SAAO;AACLC,IAAAA,GAAG,EAAE,CAAC,CAACD,OAAO,CAACC,GADV;AAELC,IAAAA,IAAI,EAAE,CAAC,CAACF,OAAO,CAACE,IAFX;AAGLC,IAAAA,GAAG,EAAE,CAAC,CAACH,OAAO,CAACG,GAHV;AAILC,IAAAA,OAAO,EAAE,CAAC,CAACJ,OAAO,CAACI,OAJd;AAKLC,IAAAA,QAAQ,EAAEL,OAAO,CAACK,QALb;AAML;AACA;AACAtB,IAAAA,IAAI,EAAE,OAAOiB,OAAO,CAACjB,IAAf,KAAwB,QAAxB,GAAqCiB,OAAO,CAACjB,IAA7C,GAA2EuB;AAR5E,GAAP;AAUD;;AAED,eAAeC,sBAAf,CAAsCC,WAAtC,EAA2DlB,UAA3D,EAAgF;AAC9E,MAAI,EAAE,MAAME,SAAS,GAACe,sBAAV,CAAiC;AAAEC,IAAAA,WAAF;AAAelB,IAAAA,UAAf;AAA2BmB,IAAAA,SAAS,EAAE;AAAtC,GAAjC,CAAR,CAAJ,EAA8F;AAC5Ff,mBAAIgB,OAAJ;;AACAhB,mBAAIiB,MAAJ,CAAW,wDAAX;;AACAjB,mBAAIgB,OAAJ;;AACAvB,IAAAA,OAAO,CAACW,IAAR,CAAa,CAAb;AACD;AACF;;AAED,eAAec,uBAAf,CAAuCC,KAAvC,EAAwE;AACtE,MAAI9B,IAAI,GAAG8B,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEC,IAAP,EAAX;;AAEA,MAAI,CAAC/B,IAAL,EAAW;AACT,QAAI;AACF,YAAM;AAAEgC,QAAAA;AAAF,UAAa,MAAM,wBACvB;AACEC,QAAAA,IAAI,EAAE,MADR;AAEEjC,QAAAA,IAAI,EAAE,QAFR;AAGEkC,QAAAA,OAAO,EAAE,uCAHX;AAIEC,QAAAA,OAAO,EAAE,QAJX;AAKEC,QAAAA,QAAQ,EAAEpC,IAAI,IAAI;AAChB,gBAAMQ,UAAU,GAAGC,SAAS,GAACC,YAAV,CAAuB2B,gBAAKC,QAAL,CAAcD,gBAAKE,OAAL,CAAavC,IAAb,CAAd,CAAvB,CAAnB;;AACA,cAAI,OAAOQ,UAAP,KAAsB,QAA1B,EAAoC;AAClC,mBAAO,2BAA2BA,UAAlC;AACD;;AACD,iBAAO,IAAP;AACD;AAXH,OADuB,EAcvB;AACEgC,QAAAA,kBAAkB,EAAE;AADtB,OAduB,CAAzB;;AAmBA,UAAI,OAAOR,MAAP,KAAkB,QAAtB,EAAgC;AAC9BhC,QAAAA,IAAI,GAAGgC,MAAM,CAACD,IAAP,EAAP;AACD;AACF,KAvBD,CAuBE,OAAOnB,KAAP,EAAc;AACd;AACA,UAAIA,KAAK,CAAC6B,IAAN,KAAe,SAAnB,EAA8B;AAC5B,cAAM7B,KAAN;AACD;AACF;AACF;;AAED,MAAI,CAACZ,IAAL,EAAW;AACTW,mBAAIgB,OAAJ;;AACAhB,mBAAIiB,MAAJ,CAAW,8BAAX;;AACAjB,mBAAIiB,MAAJ,CAAY,KAAIjB,eAAIE,KAAJ,CAAU6B,KAAV,CAAiB,GAAEC,qBAAQ3C,IAAR,EAAe,OAAlC,CAA0C,IAAGW,eAAIE,KAAJ,CAAU+B,IAAV,CAAe,YAAf,CAA6B,EAA1F;;AACAjC,mBAAIgB,OAAJ;;AACAhB,mBAAIiB,MAAJ,CAAY,OAAMjB,eAAIE,KAAJ,CAAU6B,KAAV,CAAiB,GAAEC,qBAAQ3C,IAAR,EAAe,cAAlC,CAAiD,iBAAnE;;AACAW,mBAAIgB,OAAJ;;AACAvB,IAAAA,OAAO,CAACW,IAAR,CAAa,CAAb;AACD;;AAED,QAAMU,WAAW,GAAGY,gBAAKE,OAAL,CAAavC,IAAb,CAApB;;AACA,QAAMO,UAAU,GAAG8B,gBAAKC,QAAL,CAAcb,WAAd,CAAnB;;AAEAnB,EAAAA,eAAe,CAACC,UAAD,CAAf;AAEA,QAAMsC,mBAAGC,SAAH,CAAarB,WAAb,CAAN;AAEA,QAAMD,sBAAsB,CAACC,WAAD,EAAclB,UAAd,CAA5B;AAEA,SAAOkB,WAAP;AACD;;AAED,eAAesB,MAAf,CAAsBC,UAAtB,EAA0C/B,OAA1C,EAA4D;AAAA;;AAC1D,QAAMgC,OAAO,GAAGjC,YAAY,CAACC,OAAD,CAA5B,CAD0D,CAG1D;;AACA,MAAIQ,WAAJ;;AACA,MAAI,CAACuB,UAAD,IAAeC,OAAO,CAAC/B,GAA3B,EAAgC;AAC9BO,IAAAA,WAAW,GAAGY,gBAAKE,OAAL,CAAanC,OAAO,CAAC8C,GAAR,EAAb,CAAd;;AACA,UAAM3C,UAAU,GAAG8B,gBAAKC,QAAL,CAAcb,WAAd,CAAnB;;AACAnB,IAAAA,eAAe,CAACC,UAAD,CAAf;AACA,UAAMiB,sBAAsB,CAACC,WAAD,EAAclB,UAAd,CAA5B;AACD,GALD,MAKO;AACLkB,IAAAA,WAAW,GAAG,MAAMI,uBAAuB,CAACmB,UAAU,IAAIC,OAAO,CAACjD,IAAvB,CAA3C;AACD;;AAED,MAAImD,gBAA+B,wBAAGF,OAAO,CAAC3B,QAAX,iEAAuB,IAA1D,CAd0D,CAe1D;;AACA,MAAI6B,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BC,IAAAA,OAAO,CAACzC,GAAR;AACAyC,IAAAA,OAAO,CAACzC,GAAR,CAAY,6BAAZ;AACAyC,IAAAA,OAAO,CAACzC,GAAR;AACAP,IAAAA,OAAO,CAACW,IAAR,CAAa,CAAb;AACD,GArByD,CAuB1D;AACA;;;AACA,MAAIkC,OAAO,CAAC/B,GAAR,IAAe,CAACiC,gBAApB,EAAsC;AACpCA,IAAAA,gBAAgB,GAAG,OAAnB;AACD;;AAED,MAAIE,YAAJ;;AACA,MAAIF,gBAAJ,EAAsB;AACpBE,IAAAA,YAAY,GAAG,8BAAcF,gBAAd,CAAf,CADoB,CAGpB;AACA;;AACA,QACE,CAACE,YAAY,CAACrD,IAAb,KAAsB,OAAtB,IACCqD,YAAY,CAACrD,IAAb,KAAsB,MADvB,IAECqD,YAAY,CAACrD,IAAb,KAAsB,cAFxB,KAGAqD,YAAY,CAACC,QAJf,EAKE;AACAD,MAAAA,YAAY,CAACE,WAAb,GAA4B,iBAAgBF,YAAY,CAACrD,IAAK,EAA9D;AACAqD,MAAAA,YAAY,CAACrD,IAAb,GAAoBqD,YAAY,CAACE,WAAjC;AACAF,MAAAA,YAAY,CAACG,GAAb,GAAmBH,YAAY,CAACE,WAAhC;AACD;AACF,GAfD,MAeO;AACL,UAAME,iBAAiB,GACrBC,IAAI,CAACC,GAAL,CAAS,GAAG7D,kBAAkB,CAAC8D,GAAnB,CAAuBC,CAAC,IAAK,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAC,CAAC9D,SAAF,CAAY+D,MAApC,GAA6C,CAA1E,CAAZ,IACA,CAFF;AAGA,UAAM;AAAExC,MAAAA;AAAF,QAAe,MAAM,uBACzB;AACEW,MAAAA,IAAI,EAAE,MADR;AAEEjC,MAAAA,IAAI,EAAE,UAFR;AAGEkC,MAAAA,OAAO,EAAE,oBAHX;AAIE6B,MAAAA,QAAQ,EAAE,EAJZ;AAKEC,MAAAA,OAAO,EAAElE,kBAAkB,CAAC8D,GAAnB,CAAuBtC,QAAQ,IAAI;AAC1C,YAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,iBAAO2C,kBAAOC,SAAP,CAAiB5C,QAAjB,CAAP;AACD,SAFD,MAEO;AACL,iBAAO;AACL6C,YAAAA,KAAK,EAAE7C,QAAQ,CAACtB,IADX;AAELA,YAAAA,IAAI,EACFa,iBAAMuD,IAAN,CAAW,uBAAO9C,QAAQ,CAACvB,SAAhB,EAA2B0D,iBAA3B,CAAX,IACA,0BACE,yBACEA,iBAAiB,GAAG,CADtB,EAEErD,OAAO,CAACiE,MAAR,CAAeC,OAAf,IAA0B,EAF5B,EAGEhD,QAAQ,CAACrB,WAHX,CADF,CAJG;AAULsE,YAAAA,KAAK,EAAEjD,QAAQ,CAACtB;AAVX,WAAP;AAYD;AACF,OAjBQ;AALX,KADyB,EAyBzB;AACEwC,MAAAA,kBAAkB,EAChB;AAFJ,KAzByB,CAA3B;AA8BAa,IAAAA,YAAY,GAAG,8BAAc/B,QAAd,CAAf;AACD;;AAED,QAAMkD,WAAW,GAAGnC,gBAAKC,QAAL,CAAcb,WAAd,CAApB;;AACA,QAAMgD,aAAkD,GAAG;AACzDC,IAAAA,IAAI,EAAE;AACJ1E,MAAAA,IAAI,EAAEwE,WADF;AAEJG,MAAAA,IAAI,EAAEH;AAFF;AADmD,GAA3D;AAMA,QAAMI,gBAAgB,GAAG,MAAMC,kBAAOC,QAAP,CAAgBzB,YAAhB,CAA/B,CAzF0D,CA0F1D;;AACA,QAAM0B,MAAM,GAAG7E,uBAAuB,CAAC8E,QAAxB,CAAiCJ,gBAAgB,CAAC5E,IAAlD,CAAf;;AACA,MAAI+E,MAAJ,EAAY;AACVN,IAAAA,aAAa,CAACzE,IAAd,GAAqBwE,WAArB;AACD;;AAED,QAAMS,mBAAmB,GAAGxE,SAAS,GAACyE,aAAV,CAAwB,2CAAxB,CAA5B;AACA,MAAIC,WAAJ;;AACA,MAAI;AACFA,IAAAA,WAAW,GAAG,MAAMC,WAAIC,iCAAJ,CAClBhC,YADkB,EAElB5B,WAFkB,EAGlBgD,aAHkB,CAApB;AAKAQ,IAAAA,mBAAmB,CAACK,OAApB,CAA4B,yCAA5B;AACD,GAPD,CAOE,OAAOC,CAAP,EAAU;AACVN,IAAAA,mBAAmB,CAACO,IAApB,CACE,uEADF;AAGA,UAAMD,CAAN;AACD,GA9GyD,CAgH1D;;;AAEA,QAAME,cAAc,GAAGC,qBAAqB,CAACzC,OAAD,CAA5C,CAlH0D,CAoH1D;;AACA,QAAM0C,QAAQ,GAAGZ,MAAM,GAAG,MAAH,GAAY,SAAnC;AAEA,MAAIa,aAAsB,GAAG,KAA7B;AACA,QAAMC,kBAAkB,GAAG,MAAMhD,mBAAGiD,UAAH,CAAczD,gBAAK0D,IAAL,CAAUtE,WAAV,EAAuB,KAAvB,CAAd,CAAjC;;AACA,MAAIwB,OAAO,CAAC5B,OAAZ,EAAqB;AACnB,UAAM2E,4BAA4B,CAACvE,WAAD,EAAcgE,cAAd,CAAlC;;AACA,QAAII,kBAAJ,EAAwB;AACtBD,MAAAA,aAAa,GAAG,MAAMnF,SAAS,GAACwF,qBAAV,CAAgCxE,WAAhC,CAAtB;AACD;AACF,GA9HyD,CAgI1D;;;AAEA,QAAMyE,MAAM,GAAGzF,SAAS,GAAC0F,sBAAV,CAAiC1E,WAAjC,CAAf;AAEA,MAAI2E,6BAAJ;AACA,MAAIC,+BAAwC,GAAG,KAA/C;AACA,MAAIC,QAAuB,GAAG,IAA9B;;AAEA,MAAIvB,MAAJ,EAAY;AACVuB,IAAAA,QAAQ,GAAG,MAAMC,mBAAYC,uBAAZ,EAAjB;;AACA,QAAIF,QAAJ,EAAc;AACZ,UAAI;AACF,cAAMG,iCAAiC,CAACtB,WAAD,EAAcV,aAAd,EAAoC6B,QAApC,CAAvC;AACAD,QAAAA,+BAA+B,GAAG,IAAlC;AACD,OAHD,CAGE,gBAAM,CAAE;AACX;;AACDD,IAAAA,6BAA6B,GAAG,MAAM,6CAAwBjB,WAAxB,CAAtC;AACD,GAjJyD,CAmJ1D;;;AAEAxE,iBAAI+F,gBAAJ;;AACA,QAAMC,oBAAoB,CAAC;AACzBT,IAAAA,MADyB;AAEzBT,IAAAA,cAFyB;AAGzBE,IAAAA,QAHyB;AAIzBS,IAAAA,6BAJyB;AAKzBC,IAAAA,+BALyB;AAMzBC,IAAAA;AANyB,GAAD,CAA1B,CAtJ0D,CA+J1D;;AACA,MAAI,CAACrD,OAAO,CAAC5B,OAAb,EAAsB;AACpBuF,IAAAA,qBAAqB,CAACV,MAAD,EAAST,cAAT,CAArB;AACD;;AACD,MAAII,kBAAkB,IAAI,CAACD,aAA3B,EAA0C;AACxCiB,IAAAA,mBAAmB,CAACX,MAAD,CAAnB;AACD,GArKyD,CAuK1D;AACA;AACA;AACA;AACA;;;AACA,MAAI;AACF;AACA;AACA,UAAMY,gBAAgB,CAAC3B,WAAD,EAAc;AAAE4B,MAAAA,MAAM,EAAE,IAAV;AAAgBC,MAAAA,MAAM,EAAE;AAAxB,KAAd,CAAtB;AACD,GAJD,CAIE,iBAAM,CACN;AACD;AACF;;AAID;AACA,SAAStB,qBAAT,CACEzC,OADF,EAEsB;AACpB,MAAIwC,cAAkC,GAAG,KAAzC;;AACA,MAAIxC,OAAO,CAAC9B,IAAR,IAAiB,CAAC8B,OAAO,CAAC7B,GAAT,IAAgB6F,cAAc,GAACC,aAAf,EAArC,EAAsE;AACpEzB,IAAAA,cAAc,GAAG,MAAjB;AACD,GAFD,MAEO;AACLA,IAAAA,cAAc,GAAG,KAAjB;AACD;;AACD,MAAIxC,OAAO,CAAC5B,OAAZ,EAAqB;AACnBV,mBAAI+F,gBAAJ;;AACA,wBACEjB,cAAc,KAAK,MAAnB,GACI,2EADJ,GAEI,mCAHN;;AAKA9E,mBAAIgB,OAAJ;AACD;;AAED,SAAO8D,cAAP;AACD;;AAED,eAAeO,4BAAf,CACEvE,WADF,EAEEgE,cAFF,EAGE0B,KAA0B,GAAG;AAAEJ,EAAAA,MAAM,EAAE;AAAV,CAH/B,EAIE;AACA,QAAMK,iBAAiB,GAAG3G,SAAS,GAACyE,aAAV,CAAwB,qCAAxB,CAA1B;;AACA,MAAI;AACF,UAAMzE,SAAS,GAACuF,4BAAV,CAAuCvE,WAAvC,EAAoDgE,cAApD,EAAoE0B,KAApE,CAAN;AACAC,IAAAA,iBAAiB,CAAC9B,OAAlB,CAA0B,oCAA1B;AACD,GAHD,CAGE,iBAAM;AACN8B,IAAAA,iBAAiB,CAAC5B,IAAlB,CACG,uEAAsEC,cAAe,0CADxF;AAGD;AACF;;AAEM,eAAeqB,gBAAf,CACLO,IADK,EAELF,KAA2C,GAAG;AAAEJ,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,MAAM,EAAE;AAAzB,CAFzC,EAGL;AACA;AACA,MAAI;AACF,UAAM,2BAAW,KAAX,EAAkB,CAAC,WAAD,EAAc,uBAAd,CAAlB,EAA0D;AAC9D9D,MAAAA,GAAG,EAAEmE;AADyD,KAA1D,CAAN;AAGA,KAACF,KAAK,CAACJ,MAAP,IAAiB,oBAAI,iEAAJ,CAAjB;AACD,GALD,CAKE,OAAOxB,CAAP,EAAU;AACV,QAAIA,CAAC,CAAC+B,KAAF,KAAY,QAAhB,EAA0B;AACxB,OAACH,KAAK,CAACJ,MAAP,IAAiBpG,eAAI4G,IAAJ,CAAS,mDAAT,CAAjB;AACA,aAAO,KAAP;AACD;AACF,GAZD,CAcA;;;AACA,MAAI;AACF,UAAM,2BAAW,KAAX,EAAkB,CAAC,MAAD,CAAlB,EAA4B;AAAErE,MAAAA,GAAG,EAAEmE;AAAP,KAA5B,CAAN;AACA,KAACF,KAAK,CAACJ,MAAP,IAAiB,oBAAI,+BAAJ,CAAjB;;AAEA,QAAII,KAAK,CAACH,MAAV,EAAkB;AAChB,YAAM,2BAAW,KAAX,EAAkB,CAAC,KAAD,EAAQ,OAAR,CAAlB,EAAoC;AAAE9D,QAAAA,GAAG,EAAEmE,IAAP;AAAaG,QAAAA,KAAK,EAAE;AAApB,OAApC,CAAN;AACA,YAAM,2BAAW,KAAX,EAAkB,CAAC,QAAD,EAAW,IAAX,EAAiB,wBAAjB,CAAlB,EAA8D;AAClEtE,QAAAA,GAAG,EAAEmE,IAD6D;AAElEG,QAAAA,KAAK,EAAE;AAF2D,OAA9D,CAAN;AAID;;AACD,WAAO,IAAP;AACD,GAZD,CAYE,OAAOjC,CAAP,EAAU;AACV;AACA,WAAO,KAAP;AACD;AACF,C,CAED;;;AACA,SAASqB,qBAAT,CAA+BV,MAA/B,EAA+CT,cAA/C,EAAqF;AACnF9E,iBAAIgB,OAAJ;;AACAhB,iBAAIiB,MAAJ,CAAY,yEAAZ;;AACAjB,iBAAIiB,MAAJ,CAAW,EAAX;;AACA,MAAIsE,MAAJ,EAAY;AACV;AACAvF,mBAAIiB,MAAJ,CAAY,QAAOsE,MAAO,GAA1B;AACD;;AACDvF,iBAAIiB,MAAJ,CAAY,KAAI6D,cAAc,KAAK,KAAnB,GAA2B,aAA3B,GAA2C,MAAO,EAAlE;;AACA9E,iBAAIiB,MAAJ,CAAW,EAAX;AACD,C,CAED;;;AACA,SAASiF,mBAAT,CAA6BX,MAA7B,EAAmD;AACjD,MAAI9F,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AACjC;AACD;;AACDM,iBAAIgB,OAAJ;;AACAhB,iBAAIiB,MAAJ,CACG,wGADH;;AAGAjB,iBAAIiB,MAAJ,CAAW,EAAX;;AACA,MAAIsE,MAAJ,EAAY;AACV;AACAvF,mBAAIiB,MAAJ,CAAY,QAAOsE,MAAO,GAA1B;AACD;;AACDvF,iBAAIiB,MAAJ,CAAY,mBAAZ;;AACAjB,iBAAIiB,MAAJ,CAAW,EAAX;AACD,C,CAED;;;AACA,SAAS+E,oBAAT,CAA8B;AAC5BT,EAAAA,MAD4B;AAE5BT,EAAAA,cAF4B;AAG5BE,EAAAA,QAH4B;AAI5BS,EAAAA,6BAJ4B;AAK5BC,EAAAA,+BAL4B;AAM5BC,EAAAA;AAN4B,CAA9B,EAcG;AACD3F,iBAAIiB,MAAJ,CAAWf,iBAAMuD,IAAN,CAAY,0BAAZ,CAAX;;AACAzD,iBAAIgB,OAAJ,GAFC,CAID;;;AACA,MAAIuE,MAAJ,EAAY;AACVvF,mBAAIiB,MAAJ,CACG,+EAA8E6D,cAAe,YADhG;;AAGA9E,mBAAIgB,OAAJ;;AACAhB,mBAAIiB,MAAJ,CAAY,KAAIf,iBAAMuD,IAAN,CAAW,QAAQ8B,MAAnB,CAA2B,EAA3C;AACD,GAND,MAMO;AACLvF,mBAAIiB,MAAJ,CAAY,iDAAgD6D,cAAe,YAA3E;;AACA9E,mBAAIgB,OAAJ;AACD;;AAED,MAAIgE,QAAQ,KAAK,SAAjB,EAA4B;AAC1BhF,mBAAIiB,MAAJ,CACG,KAAIf,iBAAMuD,IAAN,CAAY,GAAEqB,cAAe,QAA7B,CAAsC,IAAG5E,iBAAM4G,GAAN,CAC3C,8FAD2C,CAE5C,EAHJ;AAKD;;AACD9G,iBAAIiB,MAAJ,CAAY,KAAIf,iBAAMuD,IAAN,CAAWqB,cAAc,KAAK,KAAnB,GAA2B,iBAA3B,GAA+C,cAA1D,CAA0E,EAA1F;;AAEA,MAAIiC,YAAY,GAAG,EAAnB;;AACA,MAAI,CAACvH,OAAD,IAAYwF,QAAQ,KAAK,MAA7B,EAAqC;AACnC+B,IAAAA,YAAY,GACV,0HADF;AAED,GAHD,MAGO,IAAI,CAACvH,OAAD,IAAYwF,QAAQ,KAAK,SAA7B,EAAwC;AAC7C+B,IAAAA,YAAY,GAAG,mEAAf;AACD;;AACD/G,iBAAIiB,MAAJ,CACG,KAAIf,iBAAMuD,IAAN,CAAWqB,cAAc,KAAK,KAAnB,GAA2B,aAA3B,GAA2C,UAAtD,CAAkE,GAAEiC,YAAa,EADxF;;AAIA/G,iBAAIiB,MAAJ,CAAY,KAAIf,iBAAMuD,IAAN,CAAWqB,cAAc,KAAK,KAAnB,GAA2B,aAA3B,GAA2C,UAAtD,CAAkE,EAAlF;;AAEA,MAAIE,QAAQ,KAAK,MAAjB,EAAyB;AACvBhF,mBAAIgB,OAAJ;;AACAhB,mBAAIiB,MAAJ,CACG,+CAA8Cf,iBAAMuD,IAAN,CAAW,KAAX,CAAkB,QAAOvD,iBAAMuD,IAAN,CACtE,SADsE,CAEtE,0CAHJ;;AAMA,QAAIgC,6BAAJ,EAAmC;AACjCzF,qBAAIiB,MAAJ,CACG,MAAK,6BACJ,cADI,EAEJ,0EAFI,CAGJ,0FAAyFf,iBAAMuD,IAAN,CACzF,cADyF,CAEzF,KAAI,6BAAa,aAAb,EAA4B,mDAA5B,CAAiF,EANzF;AAQD,KATD,MASO,IAAIiC,+BAAJ,EAAqC;AAC1C1F,qBAAIiB,MAAJ,CACG,MAAK,6BACJ,cADI,EAEJ,0EAFI,CAGJ,yGAAwGf,iBAAMuD,IAAN,CACxGkC,QADwG,CAExG,gHANJ;AAQD,KATM,MASA;AACL3F,qBAAIiB,MAAJ,CACG,MAAK,6BACJ,cADI,EAEJ,0EAFI,CAGJ,+KAJJ;AAMD,KAjCsB,CAkCvB;AACA;AACA;AACA;AACA;;AACD;AACF;;AAED,eAAe6E,iCAAf,CACEhF,WADF,EAEEgD,aAFF,EAGE6B,QAHF,EAIE;AACA,QAAM;AAAEqB,IAAAA;AAAF,MAAU,MAAM,yBAAUlG,WAAV,CAAtB,CADA,CAGA;;AACA,QAAMmG,mBAAmB,GAAG,MAAMC,wBAAcC,QAAd,CAAuBC,kCAAvB,CAChCtG,WADgC,CAAlC;;AAGA,MAAI,CAACmG,mBAAL,EAA0B;AACxB,UAAM,IAAII,KAAJ,CAAW,6DAA4DvG,WAAY,GAAnF,CAAN;AACD;;AACD,QAAMwG,mBAAmB,GAAG,MAAMJ,wBAAcC,QAAd,CAAuBI,wBAAvB,CAChCN,mBADgC,CAAlC;AAGA,QAAMO,MAAM,GAAG,MAAMN,wBAAcO,OAAd,CAAsBC,gBAAtB,CAAuCV,GAAvC,EAA4CM,mBAA5C,EAAiE3B,QAAjE,CAArB;AACA,QAAMuB,wBAAcC,QAAd,CAAuBQ,yBAAvB,CAAiDV,mBAAjD,EAAsEO,MAAtE,CAAN,CAdA,CAgBA;;AACA,QAAMI,mBAAmB,GAAGlG,gBAAK0D,IAAL,CAAUtE,WAAV,EAAuB,KAAvB,EAA8BgD,aAAa,CAACzE,IAA5C,EAAkD,YAAlD,CAA5B;;AACA,MAAI;AACF,UAAMwI,gBAASC,WAAT,CAAqBF,mBAArB,EAA0C,MAA1C,EAAkDG,SAAS,IAAI;AACnE,aAAOC,oBAAUP,OAAV,CAAkBC,gBAAlB,CAAmCV,GAAnC,EAAwCe,SAAxC,EAAmDpC,QAAnD,CAAP;AACD,KAFK,CAAN;AAGD,GAJD,SAIU;AACR,UAAMkC,gBAASI,gBAAT,CAA0BL,mBAA1B,EAA+C,MAA/C,EAAuD,KAAvD,CAAN;AACD;AACF;;AAED,SAAS7H,YAAT,CAAsBmI,SAAtB,EAAyC7I,IAAzC,EAAmE;AACjE,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,EAAzC,EAA6C;AAC3C,WAAO,oCAAP;AACD;;AACD,MAAI,CAAC,oBAAoB8I,IAApB,CAAyB9I,IAAzB,CAAL,EAAqC;AACnC,WAAO,4DAAP;AACD;;AACD,QAAM+I,GAAG,GAAG1G,gBAAK0D,IAAL,CAAU8C,SAAV,EAAqB7I,IAArB,CAAZ;;AACA,MAAI,CAACgJ,uBAAuB,CAACD,GAAD,CAA5B,EAAmC;AACjC,WAAQ,aAAYA,GAAI,+EAAxB;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASE,mBAAT,CAA6BjJ,IAA7B,EAA2C;AACzC,SACE,eAAe8I,IAAf,CAAoB9I,IAApB,KAA6B,iEAD/B;AAGD;;AAED,SAASgJ,uBAAT,CAAiCD,GAAjC,EAA8C;AAC5C,MAAI;AACF,WAAOlG,mBAAGqG,QAAH,CAAYH,GAAZ,EAAiBI,WAAjB,MAAkCtG,mBAAGuG,WAAH,CAAeL,GAAf,EAAoBjF,MAApB,KAA+B,CAAxE;AACD,GAFD,CAEE,OAAOlD,KAAP,EAAc;AACd,QAAIA,KAAK,CAAC6B,IAAN,KAAe,QAAnB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AACD,UAAM7B,KAAN;AACD;AACF;;AAED,eAAeyI,mBAAf,CACER,SADF,EAEES,OAFF,EAGErG,OAHF,EAI0B;AACxB,MAAIuB,WAAJ;;AACA,MAAI8E,OAAJ,EAAa;AACX,UAAMC,gBAAgB,GAAGN,mBAAmB,CAACK,OAAD,CAA5C;;AACA,QAAIC,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,YAAM,KAAIC,uBAAJ,EAAiB,sBAAjB,EAAyCD,gBAAzC,CAAN;AACD;;AACD/E,IAAAA,WAAW,GAAG8E,OAAd;AACD,GAND,MAMO;AACL,KAAC;AAAE9E,MAAAA;AAAF,QAAkB,MAAM,uBAAO;AAC9BxE,MAAAA,IAAI,EAAE,aADwB;AAE9BkC,MAAAA,OAAO,EAAE,uCAFqB;AAG9BuH,MAAAA,OAAO,EAAE,OAHqB;AAI9BC,MAAAA,MAAM,EAAG1J,IAAD,IAAkBA,IAAI,CAAC+B,IAAL,EAJI;AAK9BK,MAAAA,QAAQ,EAAGpC,IAAD,IAAkBiJ,mBAAmB,CAACjJ,IAAD;AALjB,KAAP,CAAzB;AAOD;;AAED,SAAO;AACLA,IAAAA,IAAI,EAAEwE,WADD;AAELE,IAAAA,IAAI,EAAE;AACJ1E,MAAAA,IAAI,EAAEiD,OAAO,CAACjD,IAAR,IAAgBwE,WADlB;AAEJG,MAAAA,IAAI,EAAEH;AAFF;AAFD,GAAP;AAOD;;AAED,eAAemF,sBAAf,CACEd,SADF,EAEES,OAFF,EAGErG,OAHF,EAIwD;AACtD,MAAI0B,IAAJ;;AACA,MAAI2E,OAAJ,EAAa;AACX3E,IAAAA,IAAI,GAAG2E,OAAP;AACD,GAFD,MAEO;AACL,KAAC;AAAE3E,MAAAA;AAAF,QAAW,MAAM,uBAAO;AACvB3E,MAAAA,IAAI,EAAE,MADiB;AAEvBkC,MAAAA,OAAO,EAAE,uCAFc;AAGvBuH,MAAAA,OAAO,EAAE,QAHc;AAIvBC,MAAAA,MAAM,EAAG1J,IAAD,IAAkBA,IAAI,CAAC+B,IAAL,EAJH;AAKvBK,MAAAA,QAAQ,EAAGpC,IAAD,IAAkBU,YAAY,CAACmI,SAAD,EAAY7I,IAAZ;AALjB,KAAP,CAAlB;AAOD;;AACD,QAAM0E,IAAI,GAAG;AAAE1E,IAAAA,IAAI,EAAE2E,IAAR;AAAcA,IAAAA;AAAd,GAAb;;AACA,MAAI1B,OAAO,CAACjD,IAAZ,EAAkB;AAChB0E,IAAAA,IAAI,CAAC1E,IAAL,GAAYiD,OAAO,CAACjD,IAApB;AACD;;AACD,SAAO;AAAE0E,IAAAA;AAAF,GAAP;AACD;;AAEc,kBAAU/B,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJ1B,OADH,CACW,aADX,EAEG2I,KAFH,CAES,GAFT,EAGGC,SAHH,CAGa,MAHb,EAIG5J,WAJH,CAIe,2BAJf,EAKG6J,MALH,CAMI,uBANJ,EAOI,qLAPJ,EASGA,MATH,CASU,OATV,EASmB,uEATnB,EAUGA,MAVH,CAUU,QAVV,EAUoB,oEAVpB,EAWGA,MAXH,CAWU,cAXV,EAW0B,4CAX1B,EAYGA,MAZH,CAYU,eAZV,EAY2B,kDAZ3B,EAaGA,MAbH,CAaU,OAbV,EAamB,4DAbnB,EAcGC,WAdH,CAcehH,MAdf;AAeD","sourcesContent":["import { AndroidConfig, BareAppConfig, ExpoConfig, IOSConfig, getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport spawnAsync from '@expo/spawn-async';\nimport { Exp, IosPlist, UserManager } from '@expo/xdl';\nimport chalk from 'chalk';\nimport program, { Command } from 'commander';\nimport fs from 'fs-extra';\nimport padEnd from 'lodash/padEnd';\nimport trimStart from 'lodash/trimStart';\nimport npmPackageArg from 'npm-package-arg';\nimport pacote from 'pacote';\nimport path from 'path';\nimport terminalLink from 'terminal-link';\nimport wordwrap from 'wordwrap';\n\nimport CommandError from '../CommandError';\nimport log from '../log';\nimport prompt from '../prompt';\nimport prompts from '../prompts';\nimport * as CreateApp from './utils/CreateApp';\nimport { usesOldExpoUpdatesAsync } from './utils/ProjectUtils';\n\ntype Options = {\n  template?: string;\n  install: boolean;\n  npm: boolean;\n  yarn: boolean;\n  yes: boolean;\n  name?: string;\n};\n\nconst FEATURED_TEMPLATES = [\n  '----- Managed workflow -----',\n  {\n    shortName: 'blank',\n    name: 'expo-template-blank',\n    description: 'a minimal app as clean as an empty canvas',\n  },\n  {\n    shortName: 'blank (TypeScript)',\n    name: 'expo-template-blank-typescript',\n    description: 'same as blank but with TypeScript configuration',\n  },\n  {\n    shortName: 'tabs (TypeScript)',\n    name: 'expo-template-tabs',\n    description: 'several example screens and tabs using react-navigation and TypeScript',\n  },\n  '----- Bare workflow -----',\n  {\n    shortName: 'minimal',\n    name: 'expo-template-bare-minimum',\n    description: 'bare and minimal, just the essentials to get you started',\n  },\n  {\n    shortName: 'minimal (TypeScript)',\n    name: 'expo-template-bare-typescript',\n    description: 'same as minimal but with TypeScript configuration',\n  },\n];\n\nconst BARE_WORKFLOW_TEMPLATES = ['expo-template-bare-minimum', 'expo-template-bare-typescript'];\nconst isMacOS = process.platform === 'darwin';\n\nfunction assertValidName(folderName: string) {\n  const validation = CreateApp.validateName(folderName);\n  if (typeof validation === 'string') {\n    log.error(`Cannot create an app named ${chalk.red(`\"${folderName}\"`)}. ${validation}`);\n    process.exit(1);\n  }\n}\n\nfunction parseOptions(command: Command): Options {\n  return {\n    yes: !!command.yes,\n    yarn: !!command.yarn,\n    npm: !!command.npm,\n    install: !!command.install,\n    template: command.template,\n    /// XXX(ville): this is necessary because with Commander.js, when the --name\n    // option is not set, `command.name` will point to `Command.prototype.name`.\n    name: typeof command.name === 'string' ? ((command.name as unknown) as string) : undefined,\n  };\n}\n\nasync function assertFolderEmptyAsync(projectRoot: string, folderName?: string) {\n  if (!(await CreateApp.assertFolderEmptyAsync({ projectRoot, folderName, overwrite: false }))) {\n    log.newLine();\n    log.nested('Try using a new directory name, or moving these files.');\n    log.newLine();\n    process.exit(1);\n  }\n}\n\nasync function resolveProjectRootAsync(input?: string): Promise<string> {\n  let name = input?.trim();\n\n  if (!name) {\n    try {\n      const { answer } = await prompts(\n        {\n          type: 'text',\n          name: 'answer',\n          message: 'What would you like to name your app?',\n          initial: 'my-app',\n          validate: name => {\n            const validation = CreateApp.validateName(path.basename(path.resolve(name)));\n            if (typeof validation === 'string') {\n              return 'Invalid project name: ' + validation;\n            }\n            return true;\n          },\n        },\n        {\n          nonInteractiveHelp: 'Pass the project name using the first argument `expo init <name>`',\n        }\n      );\n\n      if (typeof answer === 'string') {\n        name = answer.trim();\n      }\n    } catch (error) {\n      // Handle the aborted message in a custom way.\n      if (error.code !== 'ABORTED') {\n        throw error;\n      }\n    }\n  }\n\n  if (!name) {\n    log.newLine();\n    log.nested('Please choose your app name:');\n    log.nested(`  ${log.chalk.green(`${program.name()} init`)} ${log.chalk.cyan('<app-name>')}`);\n    log.newLine();\n    log.nested(`Run ${log.chalk.green(`${program.name()} init --help`)} for more info.`);\n    log.newLine();\n    process.exit(1);\n  }\n\n  const projectRoot = path.resolve(name);\n  const folderName = path.basename(projectRoot);\n\n  assertValidName(folderName);\n\n  await fs.ensureDir(projectRoot);\n\n  await assertFolderEmptyAsync(projectRoot, folderName);\n\n  return projectRoot;\n}\n\nasync function action(projectDir: string, command: Command) {\n  const options = parseOptions(command);\n\n  // Resolve the name, and projectRoot\n  let projectRoot: string;\n  if (!projectDir && options.yes) {\n    projectRoot = path.resolve(process.cwd());\n    const folderName = path.basename(projectRoot);\n    assertValidName(folderName);\n    await assertFolderEmptyAsync(projectRoot, folderName);\n  } else {\n    projectRoot = await resolveProjectRootAsync(projectDir || options.name);\n  }\n\n  let resolvedTemplate: string | null = options.template ?? null;\n  // @ts-ignore: This guards against someone passing --template without a name after it.\n  if (resolvedTemplate === true) {\n    console.log();\n    console.log('Please specify the template');\n    console.log();\n    process.exit(1);\n  }\n\n  // Download and sync templates\n  // TODO(Bacon): revisit\n  if (options.yes && !resolvedTemplate) {\n    resolvedTemplate = 'blank';\n  }\n\n  let templateSpec;\n  if (resolvedTemplate) {\n    templateSpec = npmPackageArg(resolvedTemplate);\n\n    // For backwards compatibility, 'blank' and 'tabs' are aliases for\n    // 'expo-template-blank' and 'expo-template-tabs', respectively.\n    if (\n      (templateSpec.name === 'blank' ||\n        templateSpec.name === 'tabs' ||\n        templateSpec.name === 'bare-minimum') &&\n      templateSpec.registry\n    ) {\n      templateSpec.escapedName = `expo-template-${templateSpec.name}`;\n      templateSpec.name = templateSpec.escapedName;\n      templateSpec.raw = templateSpec.escapedName;\n    }\n  } else {\n    const descriptionColumn =\n      Math.max(...FEATURED_TEMPLATES.map(t => (typeof t === 'object' ? t.shortName.length : 0))) +\n      2;\n    const { template } = await prompt(\n      {\n        type: 'list',\n        name: 'template',\n        message: 'Choose a template:',\n        pageSize: 20,\n        choices: FEATURED_TEMPLATES.map(template => {\n          if (typeof template === 'string') {\n            return prompt.separator(template);\n          } else {\n            return {\n              value: template.name,\n              name:\n                chalk.bold(padEnd(template.shortName, descriptionColumn)) +\n                trimStart(\n                  wordwrap(\n                    descriptionColumn + 2,\n                    process.stdout.columns || 80\n                  )(template.description)\n                ),\n              short: template.name,\n            };\n          }\n        }),\n      },\n      {\n        nonInteractiveHelp:\n          '--template: argument is required in non-interactive mode. Valid choices are: \"blank\", \"tabs\", \"bare-minimum\" or any custom template (name of npm package).',\n      }\n    );\n    templateSpec = npmPackageArg(template);\n  }\n\n  const projectName = path.basename(projectRoot);\n  const initialConfig: Record<string, any> & { expo: any } = {\n    expo: {\n      name: projectName,\n      slug: projectName,\n    },\n  };\n  const templateManifest = await pacote.manifest(templateSpec);\n  // TODO: Use presence of ios/android folder instead.\n  const isBare = BARE_WORKFLOW_TEMPLATES.includes(templateManifest.name);\n  if (isBare) {\n    initialConfig.name = projectName;\n  }\n\n  const extractTemplateStep = CreateApp.logNewSection('Downloading and extracting project files.');\n  let projectPath;\n  try {\n    projectPath = await Exp.extractAndPrepareTemplateAppAsync(\n      templateSpec,\n      projectRoot,\n      initialConfig\n    );\n    extractTemplateStep.succeed('Downloaded and extracted project files.');\n  } catch (e) {\n    extractTemplateStep.fail(\n      'Something went wrong in downloading and extracting the project files.'\n    );\n    throw e;\n  }\n\n  // Install dependencies\n\n  const packageManager = resolvePackageManager(options);\n\n  // TODO: not this\n  const workflow = isBare ? 'bare' : 'managed';\n\n  let podsInstalled: boolean = false;\n  const needsPodsInstalled = await fs.existsSync(path.join(projectRoot, 'ios'));\n  if (options.install) {\n    await installNodeDependenciesAsync(projectRoot, packageManager);\n    if (needsPodsInstalled) {\n      podsInstalled = await CreateApp.installCocoaPodsAsync(projectRoot);\n    }\n  }\n\n  // Configure updates (?)\n\n  const cdPath = CreateApp.getChangeDirectoryPath(projectRoot);\n\n  let showPublishBeforeBuildWarning: boolean | undefined;\n  let didConfigureUpdatesProjectFiles: boolean = false;\n  let username: string | null = null;\n\n  if (isBare) {\n    username = await UserManager.getCurrentUsernameAsync();\n    if (username) {\n      try {\n        await configureUpdatesProjectFilesAsync(projectPath, initialConfig as any, username);\n        didConfigureUpdatesProjectFiles = true;\n      } catch {}\n    }\n    showPublishBeforeBuildWarning = await usesOldExpoUpdatesAsync(projectPath);\n  }\n\n  // Log info\n\n  log.addNewLineIfNone();\n  await logProjectReadyAsync({\n    cdPath,\n    packageManager,\n    workflow,\n    showPublishBeforeBuildWarning,\n    didConfigureUpdatesProjectFiles,\n    username,\n  });\n\n  // Log a warning about needing to install node modules\n  if (!options.install) {\n    logNodeInstallWarning(cdPath, packageManager);\n  }\n  if (needsPodsInstalled && !podsInstalled) {\n    logCocoaPodsWarning(cdPath);\n  }\n\n  // Initialize Git at the end to ensure all lock files are committed.\n  // for now, we will just init a git repo if they have git installed and the\n  // project is not inside an existing git tree, and do it silently. we should\n  // at some point check if git is installed and actually bail out if not, because\n  // npm install will fail with a confusing error if so.\n  try {\n    // check if git is installed\n    // check if inside git repo\n    await initGitRepoAsync(projectPath, { silent: true, commit: true });\n  } catch {\n    // todo: check if git is installed, bail out\n  }\n}\n\ntype PackageManagerName = 'npm' | 'yarn';\n\n// TODO: Use in eject as well\nfunction resolvePackageManager(\n  options: Pick<Options, 'yarn' | 'npm' | 'install'>\n): PackageManagerName {\n  let packageManager: PackageManagerName = 'npm';\n  if (options.yarn || (!options.npm && PackageManager.shouldUseYarn())) {\n    packageManager = 'yarn';\n  } else {\n    packageManager = 'npm';\n  }\n  if (options.install) {\n    log.addNewLineIfNone();\n    log(\n      packageManager === 'yarn'\n        ? '🧶 Using Yarn to install packages. You can pass --npm to use npm instead.'\n        : '📦 Using npm to install packages.'\n    );\n    log.newLine();\n  }\n\n  return packageManager;\n}\n\nasync function installNodeDependenciesAsync(\n  projectRoot: string,\n  packageManager: 'yarn' | 'npm',\n  flags: { silent: boolean } = { silent: true }\n) {\n  const installJsDepsStep = CreateApp.logNewSection('Installing JavaScript dependencies.');\n  try {\n    await CreateApp.installNodeDependenciesAsync(projectRoot, packageManager, flags);\n    installJsDepsStep.succeed('Installed JavaScript dependencies.');\n  } catch {\n    installJsDepsStep.fail(\n      `Something when wrong installing JavaScript dependencies. Check your ${packageManager} logs. Continuing to initialize the app.`\n    );\n  }\n}\n\nexport async function initGitRepoAsync(\n  root: string,\n  flags: { silent: boolean; commit: boolean } = { silent: false, commit: true }\n) {\n  // let's see if we're in a git tree\n  try {\n    await spawnAsync('git', ['rev-parse', '--is-inside-work-tree'], {\n      cwd: root,\n    });\n    !flags.silent && log('New project is already inside of a git repo, skipping git init.');\n  } catch (e) {\n    if (e.errno === 'ENOENT') {\n      !flags.silent && log.warn('Unable to initialize git repo. `git` not in PATH.');\n      return false;\n    }\n  }\n\n  // not in git tree, so let's init\n  try {\n    await spawnAsync('git', ['init'], { cwd: root });\n    !flags.silent && log('Initialized a git repository.');\n\n    if (flags.commit) {\n      await spawnAsync('git', ['add', '--all'], { cwd: root, stdio: 'ignore' });\n      await spawnAsync('git', ['commit', '-m', 'Created a new Expo app'], {\n        cwd: root,\n        stdio: 'ignore',\n      });\n    }\n    return true;\n  } catch (e) {\n    // no-op -- this is just a convenience and we don't care if it fails\n    return false;\n  }\n}\n\n// TODO: Use in eject\nfunction logNodeInstallWarning(cdPath: string, packageManager: 'yarn' | 'npm'): void {\n  log.newLine();\n  log.nested(`⚠️  Before running your app, make sure you have node modules installed:`);\n  log.nested('');\n  if (cdPath) {\n    // In the case of --yes the project can be created in place so there would be no need to change directories.\n    log.nested(`  cd ${cdPath}/`);\n  }\n  log.nested(`  ${packageManager === 'npm' ? 'npm install' : 'yarn'}`);\n  log.nested('');\n}\n\n// TODO: Use in eject\nfunction logCocoaPodsWarning(cdPath: string): void {\n  if (process.platform !== 'darwin') {\n    return;\n  }\n  log.newLine();\n  log.nested(\n    `⚠️  Before running your app on iOS, make sure you have CocoaPods installed and initialize the project:`\n  );\n  log.nested('');\n  if (cdPath) {\n    // In the case of --yes the project can be created in place so there would be no need to change directories.\n    log.nested(`  cd ${cdPath}/`);\n  }\n  log.nested(`  npx pod-install`);\n  log.nested('');\n}\n\n// TODO: Use in eject\nfunction logProjectReadyAsync({\n  cdPath,\n  packageManager,\n  workflow,\n  showPublishBeforeBuildWarning,\n  didConfigureUpdatesProjectFiles,\n  username,\n}: {\n  cdPath: string;\n  packageManager: string;\n  workflow: 'managed' | 'bare';\n  showPublishBeforeBuildWarning?: boolean;\n  didConfigureUpdatesProjectFiles?: boolean;\n  username?: string | null;\n}) {\n  log.nested(chalk.bold(`✅ Your project is ready!`));\n  log.newLine();\n\n  // empty string if project was created in current directory\n  if (cdPath) {\n    log.nested(\n      `To run your project, navigate to the directory and run one of the following ${packageManager} commands.`\n    );\n    log.newLine();\n    log.nested(`- ${chalk.bold('cd ' + cdPath)}`);\n  } else {\n    log.nested(`To run your project, run one of the following ${packageManager} commands.`);\n    log.newLine();\n  }\n\n  if (workflow === 'managed') {\n    log.nested(\n      `- ${chalk.bold(`${packageManager} start`)} ${chalk.dim(\n        `# you can open iOS, Android, or web from here, or run them directly with the commands below.`\n      )}`\n    );\n  }\n  log.nested(`- ${chalk.bold(packageManager === 'npm' ? 'npm run android' : 'yarn android')}`);\n\n  let macOSComment = '';\n  if (!isMacOS && workflow === 'bare') {\n    macOSComment =\n      ' # you need to use macOS to build the iOS project - use managed workflow if you need to do iOS development without a Mac';\n  } else if (!isMacOS && workflow === 'managed') {\n    macOSComment = ' # requires an iOS device or macOS for access to an iOS simulator';\n  }\n  log.nested(\n    `- ${chalk.bold(packageManager === 'npm' ? 'npm run ios' : 'yarn ios')}${macOSComment}`\n  );\n\n  log.nested(`- ${chalk.bold(packageManager === 'npm' ? 'npm run web' : 'yarn web')}`);\n\n  if (workflow === 'bare') {\n    log.newLine();\n    log.nested(\n      `💡 You can also open up the projects in the ${chalk.bold('ios')} and ${chalk.bold(\n        'android'\n      )} directories with their respective IDEs.`\n    );\n\n    if (showPublishBeforeBuildWarning) {\n      log.nested(\n        `🚀 ${terminalLink(\n          'expo-updates',\n          'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md'\n        )} has been configured in your project. Before you do a release build, make sure you run ${chalk.bold(\n          'expo publish'\n        )}. ${terminalLink('Learn more.', 'https://expo.fyi/release-builds-with-expo-updates')}`\n      );\n    } else if (didConfigureUpdatesProjectFiles) {\n      log.nested(\n        `🚀 ${terminalLink(\n          'expo-updates',\n          'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md'\n        )} has been configured in your project. If you publish this project under a different user account than ${chalk.bold(\n          username\n        )}, you'll need to update the configuration in Expo.plist and AndroidManifest.xml before making a release build.`\n      );\n    } else {\n      log.nested(\n        `🚀 ${terminalLink(\n          'expo-updates',\n          'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md'\n        )} has been installed in your project. Before you do a release build, you'll need to configure a few values in Expo.plist and AndroidManifest.xml in order for updates to work.`\n      );\n    }\n    // TODO: add equivalent of this or some command to wrap it:\n    // # ios\n    // $ open -a Xcode ./ios/{PROJECT_NAME}.xcworkspace\n    // # android\n    // $ open -a /Applications/Android\\\\ Studio.app ./android\n  }\n}\n\nasync function configureUpdatesProjectFilesAsync(\n  projectRoot: string,\n  initialConfig: BareAppConfig,\n  username: string\n) {\n  const { exp } = await getConfig(projectRoot);\n\n  // apply Android config\n  const androidManifestPath = await AndroidConfig.Manifest.getProjectAndroidManifestPathAsync(\n    projectRoot\n  );\n  if (!androidManifestPath) {\n    throw new Error(`Could not find AndroidManifest.xml in project directory: \"${projectRoot}\"`);\n  }\n  const androidManifestJSON = await AndroidConfig.Manifest.readAndroidManifestAsync(\n    androidManifestPath\n  );\n  const result = await AndroidConfig.Updates.setUpdatesConfig(exp, androidManifestJSON, username);\n  await AndroidConfig.Manifest.writeAndroidManifestAsync(androidManifestPath, result);\n\n  // apply iOS config\n  const supportingDirectory = path.join(projectRoot, 'ios', initialConfig.name, 'Supporting');\n  try {\n    await IosPlist.modifyAsync(supportingDirectory, 'Expo', expoPlist => {\n      return IOSConfig.Updates.setUpdatesConfig(exp, expoPlist, username);\n    });\n  } finally {\n    await IosPlist.cleanBackupAsync(supportingDirectory, 'Expo', false);\n  }\n}\n\nfunction validateName(parentDir: string, name: string | undefined) {\n  if (typeof name !== 'string' || name === '') {\n    return 'The project name can not be empty.';\n  }\n  if (!/^[a-z0-9@.\\-_]+$/i.test(name)) {\n    return 'The project name can only contain URL-friendly characters.';\n  }\n  const dir = path.join(parentDir, name);\n  if (!isNonExistentOrEmptyDir(dir)) {\n    return `The path \"${dir}\" already exists. Please choose a different parent directory or project name.`;\n  }\n  return true;\n}\n\nfunction validateProjectName(name: string) {\n  return (\n    /^[a-z0-9]+$/i.test(name) || 'Project name can only include ASCII characters A-Z, a-z and 0-9'\n  );\n}\n\nfunction isNonExistentOrEmptyDir(dir: string) {\n  try {\n    return fs.statSync(dir).isDirectory() && fs.readdirSync(dir).length === 0;\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return true;\n    }\n    throw error;\n  }\n}\n\nasync function promptForBareConfig(\n  parentDir: string,\n  dirName: string | undefined,\n  options: Options\n): Promise<BareAppConfig> {\n  let projectName: string;\n  if (dirName) {\n    const validationResult = validateProjectName(dirName);\n    if (validationResult !== true) {\n      throw new CommandError('INVALID_PROJECT_NAME', validationResult);\n    }\n    projectName = dirName;\n  } else {\n    ({ projectName } = await prompt({\n      name: 'projectName',\n      message: 'What would you like to name your app?',\n      default: 'MyApp',\n      filter: (name: string) => name.trim(),\n      validate: (name: string) => validateProjectName(name),\n    }));\n  }\n\n  return {\n    name: projectName,\n    expo: {\n      name: options.name || projectName,\n      slug: projectName,\n    },\n  };\n}\n\nasync function promptForManagedConfig(\n  parentDir: string,\n  dirName: string | undefined,\n  options: Options\n): Promise<{ expo: Pick<ExpoConfig, 'name' | 'slug'> }> {\n  let slug;\n  if (dirName) {\n    slug = dirName;\n  } else {\n    ({ slug } = await prompt({\n      name: 'slug',\n      message: 'What would you like to name your app?',\n      default: 'my-app',\n      filter: (name: string) => name.trim(),\n      validate: (name: string) => validateName(parentDir, name),\n    }));\n  }\n  const expo = { name: slug, slug };\n  if (options.name) {\n    expo.name = options.name;\n  }\n  return { expo };\n}\n\nexport default function (program: Command) {\n  program\n    .command('init [path]')\n    .alias('i')\n    .helpGroup('core')\n    .description('Create a new Expo project')\n    .option(\n      '-t, --template [name]',\n      'Specify which template to use. Valid options are \"blank\", \"tabs\", \"bare-minimum\" or a package on npm (e.g. \"expo-template-bare-typescript\") that includes an Expo project template.'\n    )\n    .option('--npm', 'Use npm to install dependencies. (default when Yarn is not installed)')\n    .option('--yarn', 'Use Yarn to install dependencies. (default when Yarn is installed)')\n    .option('--no-install', 'Skip installing npm packages or CocoaPods.')\n    .option('--name [name]', 'The name of your app visible on the home screen.')\n    .option('--yes', 'Use default options. Same as \"expo init . --template blank')\n    .asyncAction(action);\n}\n"],"file":"init.js"}