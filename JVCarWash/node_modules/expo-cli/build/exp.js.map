{"version":3,"sources":["../src/exp.ts"],"names":["packageJSON","require","Api","setClientName","version","ApiV2","Command","prototype","urlOpts","addOptions","allowOffline","option","helpGroup","name","commands","length","__helpGroup","parent","longDescription","__longDescription","pad","str","width","len","Math","max","Array","join","humanReadableArgName","arg","nameOutput","variadic","required","breakSentence","input","replace","trim","prepareCommands","filter","cmd","getenv","boolish","includes","map","i","args","_args","alias","description","_description","_name","helpInformation","desc","replaceAll","argsDescription","_argsDescription","padWidth","push","forEach","cmdName","_alias","usage","chalk","bold","dim","commandHelp","options","optionHelp","string","search","split","helpGroups","command","groupName","groupOrder","Set","Object","keys","subGroupOrder","core","eas","sortSubGroupWithOrder","group","order","sortedCommands","key","shift","index","findIndex","item","startsWith","splice","concat","sortedGroups","noArgsCmd","noArgsCmdArgs","wrappedDescription","paddedName","program","on","asyncAction","asyncFn","skipUpdateCheck","action","checkCliVersionAsync","e","offline","Config","Analytics","flush","err","isCommandError","log","error","message","_isApiError","red","isXDLError","gray","stack","process","exit","asyncActionProjectDir","projectDir","opts","cwd","path","resolve","config","pathToConfig","fs","existsSync","Error","ConfigUtils","setCustomConfigPath","logLines","msg","logFn","line","logStackTrace","chunk","nestedLogFn","traceInfo","JSON","parse","addNewLineIfNone","isLibraryFrame","stackFrames","lastAppCodeFrameIndex","lastFrameIndexToLog","min","unloggedFrames","match","printNewLineBeforeNextLog","logWithLevel","level","bunyan","INFO","includesStack","nested","WARN","warn","nestedWarn","nestedError","bar","PackagerLogsStream","projectRoot","onStartBuildBundle","ProgressBar","total","clear","complete","incomplete","setBundleProgressBar","onProgressBuildBundle","percent","ticks","curr","tick","onFinishBuildBundle","startTime","endTime","terminate","green","getTime","updateLogs","updater","newLogChunks","newLogChunk","issueId","issueCleared","ProjectUtils","attachLoggerStream","stream","write","tag","type","checkConfig","Project","currentStatus","spinner","start","setSpinner","status","Doctor","validateWithoutNetworkAsync","skipSDKVersionRequirement","FATAL","stop","runAsync","programName","setSegmentNodeKey","setVersionName","_registerLogs","UserManager","setInteractiveAuthenticationCallback","loginOrRegisterAsync","env","SERVER_URL","serverUrl","parsedUrl","url","port","parseInt","hostname","api","host","developerTool","subCommand","availableCommands","suggestion","find","commandName","nonInteractive","stdin","isTTY","argv","help","console","updateIsAvailable","current","latest","deprecated","update","checkForUpdateAsync","borderColor","padding","code","NotificationCode","START_LOADING","simpleSpinner","STOP_LOADING","DOWNLOAD_CLI_PROGRESS","ERROR","Logger","notifications","addStream","global","writePathAsync","Binaries","writePathToUserSettingsAsync","generateCommandJSON","commandAsJSON","optionAsJSON","flags","default","defaultValue","sanitizeFlags","formatOptionAsMarkdown","formatOptionsAsMarkdown","formatCommandAsMarkdown","formatCommandsAsMarkdown","run","stringify","Promise","all","catch"],"mappings":"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","sourcesContent":["import bunyan from '@expo/bunyan';\nimport * as ConfigUtils from '@expo/config';\nimport simpleSpinner from '@expo/simple-spinner';\nimport {\n  Analytics,\n  Api,\n  ApiV2,\n  Binaries,\n  Config,\n  Doctor,\n  LogRecord,\n  LogUpdater,\n  Logger,\n  NotificationCode,\n  PackagerLogsStream,\n  Project,\n  ProjectUtils,\n  UserManager,\n} from '@expo/xdl';\nimport boxen from 'boxen';\nimport chalk from 'chalk';\nimport program, { Command, Option } from 'commander';\nimport fs from 'fs';\nimport getenv from 'getenv';\nimport leven from 'leven';\nimport findLastIndex from 'lodash/findLastIndex';\nimport ora from 'ora';\nimport path from 'path';\nimport ProgressBar from 'progress';\nimport stripAnsi from 'strip-ansi';\nimport url from 'url';\n\nimport { loginOrRegisterAsync } from './accounts';\nimport { registerCommands } from './commands';\nimport log from './log';\nimport update from './update';\nimport urlOpts from './urlOpts';\n\n// We use require() to exclude package.json from TypeScript's analysis since it lives outside the\n// src directory and would change the directory structure of the emitted files under the build\n// directory\nconst packageJSON = require('../package.json');\n\nApi.setClientName(packageJSON.version);\nApiV2.setClientName(packageJSON.version);\n\n// The following prototyped functions are not used here, but within in each file found in `./commands`\n// Extending commander to easily add more options to certain command line arguments\nCommand.prototype.urlOpts = function () {\n  urlOpts.addOptions(this);\n  return this;\n};\n\nCommand.prototype.allowOffline = function () {\n  this.option('--offline', 'Allows this command to run while offline');\n  return this;\n};\n\n// Add support for logical command groupings\nCommand.prototype.helpGroup = function (name: string) {\n  if (this.commands[this.commands.length - 1]) {\n    this.commands[this.commands.length - 1].__helpGroup = name;\n  } else {\n    this.parent.helpGroup(name);\n  }\n  return this;\n};\n\n// A longer description that will be displayed then the command is used with --help\nCommand.prototype.longDescription = function (name: string) {\n  if (this.commands[this.commands.length - 1]) {\n    this.commands[this.commands.length - 1].__longDescription = name;\n  } else {\n    this.parent.longDescription(name);\n  }\n  return this;\n};\n\nfunction pad(str: string, width: number): string {\n  // Pulled from commander for overriding\n  const len = Math.max(0, width - stripAnsi(str).length);\n  return str + Array(len + 1).join(' ');\n}\n\nfunction humanReadableArgName(arg: any): string {\n  // Pulled from commander for overriding\n  const nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n  return arg.required ? `<${nameOutput}>` : `[${nameOutput}]`;\n}\n\nfunction breakSentence(input: string): string {\n  // Break a sentence by the word after a max character count\n  return input.replace(/(.{1,72})(?:\\n|$| )/g, '$1\\n').trim();\n}\n\nCommand.prototype.prepareCommands = function () {\n  return this.commands\n    .filter(function (cmd: Command) {\n      // Display all commands with EXPO_DEBUG, otherwise use the noHelp option.\n      if (getenv.boolish('EXPO_DEBUG', false)) {\n        return true;\n      }\n      return !['internal', 'eas'].includes(cmd.__helpGroup);\n    })\n    .map(function (cmd: Command, i: number) {\n      const args = cmd._args.map(humanReadableArgName).join(' ');\n\n      // Remove alias. We still show this with --help on the command.\n      const alias = null; //cmd._alias;\n\n      const description = cmd._description;\n      return [\n        cmd._name +\n          (alias ? '|' + alias : '') +\n          // Remove the redundant [options] string that's shown after every command.\n          // (cmd.options.length ? ' [options]' : '') +\n          (args ? ' ' + args : ''),\n        breakSentence(description),\n        cmd.__helpGroup ?? 'misc',\n      ];\n    });\n};\n\nCommand.prototype.helpInformation = function () {\n  let desc: string[] = [];\n  // Use the long description if available, otherwise use the regular description.\n  const description = this.__longDescription ?? this._description;\n  if (description) {\n    desc = [replaceAll(breakSentence(description), '\\n', pad('\\n', 3)), ''];\n\n    const argsDescription = this._argsDescription;\n    if (argsDescription && this._args.length) {\n      const width = this.padWidth();\n      desc.push('Arguments:');\n      desc.push('');\n      this._args.forEach(({ name }: { name: string }) => {\n        desc.push('  ' + pad(name, width) + '  ' + argsDescription[name]);\n      });\n      desc.push('');\n    }\n  }\n\n  let cmdName = this._name;\n  if (this._alias) {\n    // Here is the only place we show the command alias\n    cmdName = `${cmdName}|${this._alias}`;\n  }\n\n  // Dim the options to keep things consistent.\n  const usage = `${chalk.bold`Usage:`} ${cmdName} ${chalk.dim(this.usage())}\\n`;\n\n  const commandHelp = '' + this.commandHelp();\n\n  const options = [chalk.bold`Options:`, '\\n' + this.optionHelp().replace(/^/gm, '    '), ''];\n\n  // return ['', usage, ...desc, ...options, commandHelp].join('\\n') + '\\n';\n  return ['', usage, ...desc, ...options, commandHelp].join(pad('\\n', 3)) + '\\n';\n};\n\nfunction replaceAll(string: string, search: string, replace: string): string {\n  return string.split(search).join(replace);\n}\n\n// Extended the help renderer to add a custom format and groupings.\nCommand.prototype.commandHelp = function () {\n  if (!this.commands.length) {\n    return '';\n  }\n  const width: number = this.padWidth();\n  const commands: string[][] = this.prepareCommands();\n\n  const helpGroups: Record<string, string[][]> = {};\n\n  // Sort commands into helpGroups\n  for (const command of commands) {\n    const groupName = command[2];\n    if (!helpGroups[groupName]) {\n      helpGroups[groupName] = [];\n    }\n    helpGroups[groupName].push(command);\n  }\n\n  const groupOrder = [\n    ...new Set([\n      'auth',\n      'core',\n      'client',\n      'info',\n      'publish',\n      'build',\n      'credentials',\n      'eas',\n      'notifications',\n      'url',\n      'webhooks',\n      'upload',\n      'eject',\n      'experimental',\n      'internal',\n      // add any others and remove duplicates\n      ...Object.keys(helpGroups),\n    ]),\n  ];\n\n  const subGroupOrder: Record<string, string[]> = {\n    core: ['init', 'start', 'start:web', 'publish', 'export'],\n    eas: ['eas:credentials'],\n  };\n\n  const sortSubGroupWithOrder = (groupName: string, group: string[][]): string[][] => {\n    const order: string[] = subGroupOrder[groupName];\n    if (!order?.length) {\n      return group;\n    }\n\n    const sortedCommands: string[][] = [];\n\n    while (order.length) {\n      const key = order.shift()!;\n      const index = group.findIndex(item => item[0].startsWith(key));\n      if (index >= 0) {\n        const [item] = group.splice(index, 1);\n        sortedCommands.push(item);\n      }\n    }\n\n    return sortedCommands.concat(group);\n  };\n\n  // Reverse the groups\n  const sortedGroups: Record<string, string[][]> = {};\n  while (groupOrder.length) {\n    const group = groupOrder.shift()!;\n    if (group in helpGroups) {\n      sortedGroups[group] = helpGroups[group];\n    }\n  }\n\n  // Render everything.\n  return [\n    '' + chalk.bold('Commands:'),\n    '',\n    // Render all of the groups.\n    Object.keys(sortedGroups)\n      .map(groupName => {\n        // Sort subgroups that have a defined order\n        const group = sortSubGroupWithOrder(groupName, helpGroups[groupName]);\n        return (\n          group\n            // Render the command and description\n            .map(([cmd, description]: string[]) => {\n              // Dim the arguments that come after the command, this makes scanning a bit easier.\n              let [noArgsCmd, ...noArgsCmdArgs] = cmd.split(' ');\n              if (noArgsCmdArgs.length) {\n                noArgsCmd += ` ${chalk.dim(noArgsCmdArgs.join(' '))}`;\n              }\n\n              // Word wrap the description.\n              let wrappedDescription = description;\n              if (description) {\n                // Ensure the wrapped description appears on the same padded line.\n                wrappedDescription = '  ' + replaceAll(description, '\\n', pad('\\n', width + 3));\n              }\n\n              const paddedName = wrappedDescription ? pad(noArgsCmd, width) : noArgsCmd;\n              return paddedName + wrappedDescription;\n            })\n            .join('\\n')\n            .replace(/^/gm, '    ')\n        );\n      })\n      // Double new line to add spacing between groups\n      .join('\\n\\n'),\n    '',\n  ].join('\\n');\n};\n\nprogram.on('--help', () => {\n  log(`  Run a command with --help for more info 💡`);\n  log(`    $ expo start --help`);\n  log();\n});\n\nexport type Action = (...args: any[]) => void;\n\n// asyncAction is a wrapper for all commands/actions to be executed after commander is done\n// parsing the command input\nCommand.prototype.asyncAction = function (asyncFn: Action, skipUpdateCheck: boolean) {\n  return this.action(async (...args: any[]) => {\n    if (!skipUpdateCheck) {\n      try {\n        await checkCliVersionAsync();\n      } catch (e) {}\n    }\n\n    try {\n      const options = args[args.length - 1];\n      if (options.offline) {\n        Config.offline = true;\n      }\n\n      await asyncFn(...args);\n      // After a command, flush the analytics queue so the program will not have any active timers\n      // This allows node js to exit immediately\n      Analytics.flush();\n    } catch (err) {\n      // TODO: Find better ways to consolidate error messages\n      if (err.isCommandError) {\n        log.error(err.message);\n      } else if (err._isApiError) {\n        log.error(chalk.red(err.message));\n      } else if (err.isXDLError) {\n        log.error(err.message);\n      } else {\n        log.error(err.message);\n        log.error(chalk.gray(err.stack));\n      }\n\n      process.exit(1);\n    }\n  });\n};\n\n// asyncActionProjectDir captures the projectDirectory from the command line,\n// setting it to cwd if it is not provided.\n// Commands such as `start` and `publish` use this.\n// It does several things:\n// - Everything in asyncAction\n// - Checks if the user is logged in or out\n// - Checks for updates\n// - Attaches the bundling logger\n// - Checks if the project directory is valid or not\n// - Runs AsyncAction with the projectDir as an argument\nCommand.prototype.asyncActionProjectDir = function (\n  asyncFn: Action,\n  options: { checkConfig?: boolean; skipSDKVersionRequirement?: boolean } = {}\n) {\n  this.option('--config [file]', 'Specify a path to app.json or app.config.js');\n  return this.asyncAction(async (projectDir: string, ...args: any[]) => {\n    const opts = args[0];\n\n    if (!projectDir) {\n      projectDir = process.cwd();\n    } else {\n      projectDir = path.resolve(process.cwd(), projectDir);\n    }\n\n    if (opts.config) {\n      const pathToConfig = path.resolve(process.cwd(), opts.config);\n      if (!fs.existsSync(pathToConfig)) {\n        throw new Error(`File at provided config path does not exist: ${pathToConfig}`);\n      }\n      ConfigUtils.setCustomConfigPath(projectDir, pathToConfig);\n    }\n\n    const logLines = (msg: any, logFn: (...args: any[]) => void) => {\n      if (typeof msg === 'string') {\n        for (const line of msg.split('\\n')) {\n          logFn(line);\n        }\n      } else {\n        logFn(msg);\n      }\n    };\n\n    const logStackTrace = (\n      chunk: LogRecord,\n      logFn: (...args: any[]) => void,\n      nestedLogFn: (...args: any[]) => void\n    ) => {\n      let traceInfo;\n      try {\n        traceInfo = JSON.parse(chunk.msg);\n      } catch (e) {\n        return logFn(chunk.msg);\n      }\n\n      const { message, stack } = traceInfo;\n      log.addNewLineIfNone();\n      logFn(chalk.bold(message));\n\n      const isLibraryFrame = (line: string) => {\n        return line.startsWith('node_modules');\n      };\n\n      const stackFrames: string[] = stack.split('\\n').filter((line: string) => line);\n      const lastAppCodeFrameIndex = findLastIndex(stackFrames, (line: string) => {\n        return !isLibraryFrame(line);\n      });\n      let lastFrameIndexToLog = Math.min(\n        stackFrames.length - 1,\n        lastAppCodeFrameIndex + 2 // show max two more frames after last app code frame\n      );\n      let unloggedFrames = stackFrames.length - lastFrameIndexToLog;\n\n      // If we're only going to exclude one frame, just log them all\n      if (unloggedFrames === 1) {\n        lastFrameIndexToLog = stackFrames.length - 1;\n        unloggedFrames = 0;\n      }\n\n      for (let i = 0; i <= lastFrameIndexToLog; i++) {\n        const line = stackFrames[i];\n        if (!line) {\n          continue;\n        } else if (line.match(/react-native\\/.*YellowBox.js/)) {\n          continue;\n        }\n\n        if (line.startsWith('node_modules')) {\n          nestedLogFn('- ' + line);\n        } else {\n          nestedLogFn('* ' + line);\n        }\n      }\n\n      if (unloggedFrames > 0) {\n        nestedLogFn(`- ... ${unloggedFrames} more stack frames from framework internals`);\n      }\n\n      log.printNewLineBeforeNextLog();\n    };\n\n    const logWithLevel = (chunk: LogRecord) => {\n      if (!chunk.msg) {\n        return;\n      }\n      if (chunk.level <= bunyan.INFO) {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log, log.nested);\n        } else {\n          logLines(chunk.msg, log);\n        }\n      } else if (chunk.level === bunyan.WARN) {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log.warn, log.nestedWarn);\n        } else {\n          logLines(chunk.msg, log.warn);\n        }\n      } else {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log.error, log.nestedError);\n        } else {\n          logLines(chunk.msg, log.error);\n        }\n      }\n    };\n\n    let bar: ProgressBar | null;\n    // eslint-disable-next-line no-new\n    new PackagerLogsStream({\n      projectRoot: projectDir,\n      onStartBuildBundle: () => {\n        bar = new ProgressBar('Building JavaScript bundle [:bar] :percent', {\n          width: 64,\n          total: 100,\n          clear: true,\n          complete: '=',\n          incomplete: ' ',\n        });\n\n        log.setBundleProgressBar(bar);\n      },\n      onProgressBuildBundle: (percent: number) => {\n        if (!bar || bar.complete) return;\n        const ticks = percent - bar.curr;\n        ticks > 0 && bar.tick(ticks);\n      },\n      onFinishBuildBundle: (err, startTime, endTime) => {\n        if (bar && !bar.complete) {\n          bar.tick(100 - bar.curr);\n        }\n\n        if (bar) {\n          log.setBundleProgressBar(null);\n          bar.terminate();\n          bar = null;\n\n          if (err) {\n            log(chalk.red('Failed building JavaScript bundle.'));\n          } else {\n            log(\n              chalk.green(\n                `Finished building JavaScript bundle in ${\n                  endTime.getTime() - startTime.getTime()\n                }ms.`\n              )\n            );\n          }\n        }\n      },\n      updateLogs: (updater: LogUpdater) => {\n        const newLogChunks = updater([]);\n        newLogChunks.forEach((newLogChunk: LogRecord) => {\n          if (newLogChunk.issueId && newLogChunk.issueCleared) {\n            return;\n          }\n          logWithLevel(newLogChunk);\n        });\n      },\n    });\n\n    // needed for validation logging to function\n    ProjectUtils.attachLoggerStream(projectDir, {\n      stream: {\n        write: (chunk: LogRecord) => {\n          if (chunk.tag === 'device') {\n            logWithLevel(chunk);\n          }\n        },\n      },\n      type: 'raw',\n    });\n\n    // The existing CLI modules only pass one argument to this function, so skipProjectValidation\n    // will be undefined in most cases. we can explicitly pass a truthy value here to avoid\n    // validation (eg for init)\n    //\n    // If the packager/manifest server is running and healthy, there is no need\n    // to rerun Doctor because the directory was already checked previously\n    // This is relevant for command such as `send`\n    if (options.checkConfig && (await Project.currentStatus(projectDir)) !== 'running') {\n      const spinner = ora('Making sure project is set up correctly...').start();\n      log.setSpinner(spinner);\n      // validate that this is a good projectDir before we try anything else\n\n      const status = await Doctor.validateWithoutNetworkAsync(projectDir, {\n        skipSDKVersionRequirement: options.skipSDKVersionRequirement,\n      });\n      if (status === Doctor.FATAL) {\n        throw new Error(`There is an error with your project. See above logs for information.`);\n      }\n      spinner.stop();\n      log.setSpinner(null);\n    }\n\n    // the existing CLI modules only pass one argument to this function, so skipProjectValidation\n    // will be undefined in most cases. we can explicitly pass a truthy value here to avoid validation (eg for init)\n\n    return asyncFn(projectDir, ...args);\n  });\n};\n\nfunction runAsync(programName: string) {\n  try {\n    // Setup analytics\n    Analytics.setSegmentNodeKey('vGu92cdmVaggGA26s3lBX6Y5fILm8SQ7');\n    Analytics.setVersionName(packageJSON.version);\n    _registerLogs();\n\n    UserManager.setInteractiveAuthenticationCallback(loginOrRegisterAsync);\n\n    if (process.env.SERVER_URL) {\n      let serverUrl = process.env.SERVER_URL;\n      if (!serverUrl.startsWith('http')) {\n        serverUrl = `http://${serverUrl}`;\n      }\n      const parsedUrl = url.parse(serverUrl);\n      const port = parseInt(parsedUrl.port || '', 10);\n      if (parsedUrl.hostname && port) {\n        Config.api.host = parsedUrl.hostname;\n        Config.api.port = port;\n      } else {\n        throw new Error('Environment variable SERVER_URL is not a valid url');\n      }\n    }\n\n    Config.developerTool = packageJSON.name;\n\n    // Setup our commander instance\n    program.name(programName);\n    program\n      .version(packageJSON.version)\n      .option('--non-interactive', 'Fail, if an interactive prompt would be required to continue.');\n\n    // Load each module found in ./commands by 'registering' it with our commander instance\n    registerCommands(program);\n\n    program.on('command:detach', () => {\n      log.warn('To eject your project to ExpoKit (previously \"detach\"), use `expo eject`.');\n      process.exit(0);\n    });\n\n    program.on('command:*', subCommand => {\n      let msg = `\"${subCommand}\" is not an expo command. See \"expo --help\" for the full list of commands.`;\n      const availableCommands = program.commands.map((cmd: Command) => cmd._name);\n      // finding the best match whose edit distance is less than 40% of their length.\n      const suggestion = availableCommands.find(\n        (commandName: string) => leven(commandName, subCommand[0]) < commandName.length * 0.4\n      );\n      if (suggestion) {\n        msg = `\"${subCommand}\" is not an expo command -- did you mean ${suggestion}?\\n See \"expo --help\" for the full list of commands.`;\n      }\n      log.warn(msg);\n    });\n\n    if (typeof program.nonInteractive === 'undefined') {\n      // Commander doesn't initialize boolean args with default values.\n      program.nonInteractive = !process.stdin.isTTY;\n    }\n\n    program.parse(process.argv);\n\n    // Show help when no sub-command specified\n    if (program.args.length === 0) {\n      program.help();\n    }\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n}\n\nasync function checkCliVersionAsync() {\n  const { updateIsAvailable, current, latest, deprecated } = await update.checkForUpdateAsync();\n  if (updateIsAvailable) {\n    log.nestedWarn(\n      boxen(\n        chalk.green(`There is a new version of ${packageJSON.name} available (${latest}).\nYou are currently using ${packageJSON.name} ${current}\nInstall expo-cli globally using the package manager of your choice;\nfor example: \\`npm install -g ${packageJSON.name}\\` to get the latest version`),\n        { borderColor: 'green', padding: 1 }\n      )\n    );\n  }\n\n  if (deprecated) {\n    log.nestedWarn(\n      boxen(\n        chalk.red(\n          `This version of expo-cli is not supported anymore.\nIt's highly recommended to update to the newest version.\n\nThe API endpoints used in this version of expo-cli might not exist,\nany interaction with Expo servers may result in unexpected behaviour.`\n        ),\n        { borderColor: 'red', padding: 1 }\n      )\n    );\n  }\n}\n\nfunction _registerLogs() {\n  const stream = {\n    stream: {\n      write: (chunk: any) => {\n        if (chunk.code) {\n          switch (chunk.code) {\n            case NotificationCode.START_LOADING:\n              simpleSpinner.start();\n              return;\n            case NotificationCode.STOP_LOADING:\n              simpleSpinner.stop();\n              return;\n            case NotificationCode.DOWNLOAD_CLI_PROGRESS:\n              return;\n          }\n        }\n\n        if (chunk.level === bunyan.INFO) {\n          log(chunk.msg);\n        } else if (chunk.level === bunyan.WARN) {\n          log.warn(chunk.msg);\n        } else if (chunk.level >= bunyan.ERROR) {\n          log.error(chunk.msg);\n        }\n      },\n    },\n    type: 'raw',\n  };\n\n  Logger.notifications.addStream(stream);\n  Logger.global.addStream(stream);\n}\n\nasync function writePathAsync() {\n  const subCommand = process.argv[2];\n  if (subCommand === 'prepare-detached-build') {\n    // This is being run from Android Studio or Xcode. Don't want to write PATH in this case.\n    return;\n  }\n\n  await Binaries.writePathToUserSettingsAsync();\n}\n\ntype OptionData = {\n  flags: string;\n  required: boolean;\n  description: string;\n  default: any;\n};\n\ntype CommandData = {\n  name: string;\n  description: string;\n  alias?: string;\n  options: OptionData[];\n};\n\n// Sets up commander with a minimal setup for inspecting commands and extracting\n// data from them.\nfunction generateCommandJSON() {\n  program.name('expo');\n  registerCommands(program);\n  return program.commands.map(commandAsJSON);\n}\n\n// The type definition for Option seems to be wrong - doesn't include defaultValue\nfunction optionAsJSON(option: Option & { defaultValue: any }): OptionData {\n  return {\n    flags: option.flags,\n    required: option.required,\n    description: option.description,\n    default: option.defaultValue,\n  };\n}\n\nfunction commandAsJSON(command: Command): CommandData {\n  return {\n    name: command.name(),\n    description: command.description(),\n    alias: command.alias(),\n    options: command.options.map(optionAsJSON),\n  };\n}\n\nfunction sanitizeFlags(flags: string) {\n  return flags.replace('<', '[').replace('>', ']');\n}\n\nfunction formatOptionAsMarkdown(option: OptionData) {\n  return `| \\`${sanitizeFlags(option.flags)}\\` | ${option.description} |`;\n}\n\nfunction formatOptionsAsMarkdown(options: OptionData[]) {\n  if (!options || !options.length) {\n    return 'This command does not take any options.';\n  }\n\n  return `| Option         | Description             |\n| ------------ | ----------------------- |\n${options.map(formatOptionAsMarkdown).join('\\n')}\n`;\n}\n\nfunction formatCommandAsMarkdown(command: CommandData) {\n  return `\n<details><summary><h3>expo ${command.name}</h3><p>${command.description}</p></summary>\n<p>${\n    command.alias\n      ? `\n\nAlias: \\`expo ${command.alias}\\``\n      : ''\n  }\n\n${formatOptionsAsMarkdown(command.options)}\n\n</p>\n</details>\n  `;\n}\n\nfunction formatCommandsAsMarkdown(commands: CommandData[]) {\n  return commands.map(formatCommandAsMarkdown).join('\\n');\n}\n\n// This is the entry point of the CLI\nexport function run(programName: string) {\n  (async function () {\n    if (process.argv[2] === 'introspect') {\n      const commands = generateCommandJSON();\n      if (process.argv[3] && process.argv[3].includes('markdown')) {\n        log(formatCommandsAsMarkdown(commands));\n      } else {\n        log(JSON.stringify(commands));\n      }\n    } else {\n      await Promise.all([writePathAsync(), runAsync(programName)]);\n    }\n  })().catch(e => {\n    console.error('Uncaught Error', e);\n    process.exit(1);\n  });\n}\n"],"file":"exp.js"}