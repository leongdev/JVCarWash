{"version":3,"sources":["../../src/appleApi/authenticate.ts"],"names":["APPLE_IN_HOUSE_TEAM_TYPE","authenticate","options","appleId","appleIdPassword","requestAppleIdCreds","teams","fastlaneSession","travelingFastlane","pipeStdout","chalk","green","team","_chooseTeam","teamId","err","rawDump","match","red","anotherPromptResult","_promptForAppleId","firstAttempt","previousAppleId","_getAppleIdFromParams","passedAppleIdPassword","process","env","EXPO_APPLE_PASSWORD","EXPO_APPLE_ID_PASSWORD","undefined","log","error","Error","wrap","stdout","columns","here","bold","grey","lastAppleId","getLastUsedAppleIdAsync","promptAppleId","type","name","message","validate","nonEmptyInput","default","nonInteractiveHelp","Keychain","EXPO_NO_KEYCHAIN","UserSettings","setAsync","password","getPasswordAsync","dim","underline","setPasswordAsync","userProvidedTeamId","length","foundTeam","find","_formatTeam","warn","choices","map","i","value","id","inHouse","toLowerCase","deleteKeyAsync","getAsync","getKeychainServiceName","deletePasswordAsync","serviceName","success","username"],"mappings":"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","sourcesContent":["import { UserSettings } from '@expo/xdl';\nimport chalk from 'chalk';\nimport terminalLink from 'terminal-link';\nimport wordwrap from 'wordwrap';\n\nimport log from '../log';\nimport prompt from '../prompt';\nimport { nonEmptyInput } from '../validators';\nimport { runAction, travelingFastlane } from './fastlane';\nimport * as Keychain from './keychain';\n\nconst APPLE_IN_HOUSE_TEAM_TYPE = 'in-house';\n\nexport type Options = {\n  appleIdPassword?: string;\n  appleId?: string;\n  teamId?: string;\n};\n\ntype AppleCredentials = {\n  appleIdPassword: string;\n  appleId: string;\n};\n\nexport type Team = {\n  id: string;\n  name?: string;\n  inHouse?: boolean;\n};\n\ntype FastlaneTeam = {\n  name: string;\n  teamId: string;\n  status: string;\n  type: string;\n};\n\nexport type AppleCtx = {\n  appleId: string;\n  appleIdPassword: string;\n  team: Team;\n  fastlaneSession: string;\n};\n\nexport async function authenticate(options: Options = {}): Promise<AppleCtx> {\n  const { appleId, appleIdPassword } = await requestAppleIdCreds(options);\n  log(`Authenticating to Apple Developer Portal...`); // use log instead of spinner in case we need to prompt user for 2fa\n  try {\n    const { teams, fastlaneSession } = await runAction(\n      travelingFastlane.authenticate,\n      [appleId, appleIdPassword],\n      {\n        pipeStdout: true,\n      }\n    );\n    log(chalk.green('Authenticated with Apple Developer Portal successfully!'));\n    const team = await _chooseTeam(teams, options.teamId);\n    return { appleId, appleIdPassword, team, fastlaneSession };\n  } catch (err) {\n    if (err.rawDump?.match(/Invalid username and password combination/)) {\n      log(chalk.red('Invalid username and password combination, try again.'));\n      const anotherPromptResult = await _promptForAppleId({\n        firstAttempt: false,\n        previousAppleId: appleId,\n      });\n      return authenticate({ ...options, ...anotherPromptResult });\n    }\n    log(chalk.red('Authentication with Apple Developer Portal failed!'));\n    throw err;\n  }\n}\n\nexport async function requestAppleIdCreds(options: Options): Promise<AppleCredentials> {\n  return _getAppleIdFromParams(options) || (await _promptForAppleId());\n}\n\nfunction _getAppleIdFromParams({ appleId, appleIdPassword }: Options): AppleCredentials | null {\n  const passedAppleIdPassword = appleId\n    ? appleIdPassword || process.env.EXPO_APPLE_PASSWORD || process.env.EXPO_APPLE_ID_PASSWORD\n    : undefined;\n\n  if (process.env.EXPO_APPLE_ID_PASSWORD) {\n    log.error('EXPO_APPLE_ID_PASSWORD is deprecated, please use EXPO_APPLE_PASSWORD instead!');\n  }\n\n  // none of the apple id params were set, assume user has no intention of passing it in\n  if (!appleId) {\n    return null;\n  }\n\n  // partial apple id params were set, assume user has intention of passing it in\n  if (!(appleId && passedAppleIdPassword)) {\n    throw new Error(\n      'In order to provide your Apple ID credentials, you must set the --apple-id flag and set the EXPO_APPLE_PASSWORD environment variable.'\n    );\n  }\n\n  return {\n    appleId: appleId as string,\n    appleIdPassword: passedAppleIdPassword as string,\n  };\n}\n\nasync function _promptForAppleId({\n  firstAttempt = true,\n  previousAppleId,\n}: { firstAttempt?: boolean; previousAppleId?: string } = {}): Promise<AppleCredentials> {\n  if (firstAttempt) {\n    const wrap = wordwrap(process.stdout.columns || 80);\n    log(\n      wrap(\n        'Please enter your Apple Developer Program account credentials. ' +\n          'These credentials are needed to manage certificates, keys and provisioning profiles ' +\n          `in your Apple Developer account.`\n      )\n    );\n\n    // https://docs.expo.io/distribution/security/#apple-developer-account-credentials\n    const here = terminalLink('here', 'https://bit.ly/2VtGWhU');\n    log(\n      wrap(\n        chalk.bold(\n          `The password is only used to authenticate with Apple and never stored on Expo servers`\n        )\n      )\n    );\n    log(wrap(chalk.grey(`Learn more ${here}`)));\n  }\n\n  // Get the email address that was last used and set it as\n  // the default value for quicker authentication.\n  const lastAppleId = await getLastUsedAppleIdAsync();\n\n  const { appleId: promptAppleId } = await prompt(\n    {\n      type: 'input',\n      name: 'appleId',\n      message: `Apple ID:`,\n      validate: nonEmptyInput,\n      default: lastAppleId ?? undefined,\n      ...(previousAppleId && { default: previousAppleId }),\n    },\n    {\n      nonInteractiveHelp: 'Pass your Apple ID using the --apple-id flag.',\n    }\n  );\n\n  // If a new email was used then store it as a suggestion for next time.\n  // This functionality is disabled using the keychain mechanism.\n  if (!Keychain.EXPO_NO_KEYCHAIN && promptAppleId && lastAppleId !== promptAppleId) {\n    await UserSettings.setAsync('appleId', promptAppleId);\n  }\n\n  // Only check on the first attempt in case the user changed their password.\n  if (firstAttempt) {\n    const password = await getPasswordAsync({ appleId: promptAppleId });\n\n    if (password) {\n      log(\n        `Using password from your local Keychain. ${chalk.dim(\n          `Learn more ${chalk.underline('https://docs.expo.io/distribution/security#keychain')}`\n        )}`\n      );\n      return { appleId: promptAppleId, appleIdPassword: password };\n    }\n  }\n  const { appleIdPassword } = await prompt(\n    {\n      type: 'password',\n      name: 'appleIdPassword',\n      message: () => `Password (for ${promptAppleId}):`,\n      validate: nonEmptyInput,\n    },\n    {\n      nonInteractiveHelp:\n        'Pass your Apple ID password using the EXPO_APPLE_PASSWORD environment variable',\n    }\n  );\n\n  await setPasswordAsync({ appleId: promptAppleId, appleIdPassword });\n\n  return { appleId: promptAppleId, appleIdPassword };\n}\n\nasync function _chooseTeam(teams: FastlaneTeam[], userProvidedTeamId?: string): Promise<Team> {\n  if (teams.length === 0) {\n    throw new Error(`You have no team associated with your Apple account, cannot proceed.\n(Do you have a paid Apple Developer account?)`);\n  }\n\n  if (userProvidedTeamId) {\n    const foundTeam = teams.find(({ teamId }) => teamId === userProvidedTeamId);\n    if (foundTeam) {\n      log(`Using Apple Team with ID: ${userProvidedTeamId}`);\n      return _formatTeam(foundTeam);\n    } else {\n      log.warn(`Your account is not associated with Apple Team with ID: ${userProvidedTeamId}`);\n    }\n  }\n\n  if (teams.length === 1) {\n    const [team] = teams;\n    log(`Only 1 team associated with your account, using Apple Team with ID: ${team.teamId}`);\n    return _formatTeam(team);\n  } else {\n    log(`You have ${teams.length} teams associated with your account`);\n    const choices = teams.map((team, i) => ({\n      name: `${i + 1}) ${team.teamId} \"${team.name}\" (${team.type})`,\n      value: team,\n    }));\n    const { team } = await prompt(\n      {\n        type: 'list',\n        name: 'team',\n        message: 'Which team would you like to use?',\n        choices,\n      },\n      {\n        nonInteractiveHelp: 'Pass in your Apple Team ID using the --team-id flag.',\n      }\n    );\n    return _formatTeam(team);\n  }\n}\n\nfunction _formatTeam({ teamId, name, type }: FastlaneTeam): Team {\n  return {\n    id: teamId,\n    name: `${name} (${type})`,\n    inHouse: type.toLowerCase() === APPLE_IN_HOUSE_TEAM_TYPE,\n  };\n}\n\nasync function getLastUsedAppleIdAsync(): Promise<string | null> {\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    // Clear last used apple ID.\n    await UserSettings.deleteKeyAsync('appleId');\n    return null;\n  }\n  try {\n    // @ts-ignore: appleId syncing issue\n    const lastAppleId = (await UserSettings.getAsync('appleId')) ?? null;\n    if (typeof lastAppleId === 'string') {\n      return lastAppleId;\n    }\n  } catch {}\n  return null;\n}\n\n/**\n * Returns the same prefix used by Fastlane in order to potentially share access between services.\n * [Cite. Fastlane](https://github.com/fastlane/fastlane/blob/f831062fa6f4b216b8ee38949adfe28fc11a0a8e/credentials_manager/lib/credentials_manager/account_manager.rb#L8).\n *\n * @param appleId email address\n */\nfunction getKeychainServiceName(appleId: string): string {\n  return `deliver.${appleId}`;\n}\n\nasync function deletePasswordAsync({\n  appleId,\n}: Pick<AppleCredentials, 'appleId'>): Promise<boolean> {\n  const serviceName = getKeychainServiceName(appleId);\n  const success = await Keychain.deletePasswordAsync({ username: appleId, serviceName });\n  if (success) {\n    log('Removed Apple ID password from the native Keychain.');\n  }\n  return success;\n}\n\nasync function getPasswordAsync({\n  appleId,\n}: Pick<AppleCredentials, 'appleId'>): Promise<string | null> {\n  // If the user opts out, delete the password.\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    await deletePasswordAsync({ appleId });\n    return null;\n  }\n\n  const serviceName = getKeychainServiceName(appleId);\n  return Keychain.getPasswordAsync({ username: appleId, serviceName });\n}\n\nasync function setPasswordAsync({ appleId, appleIdPassword }: AppleCredentials): Promise<boolean> {\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    log('Skip storing Apple ID password in the local Keychain.');\n    return false;\n  }\n\n  log(\n    `Saving Apple ID password to the local Keychain. ${chalk.dim(\n      `Learn more ${chalk.underline('https://docs.expo.io/distribution/security#keychain')}`\n    )}`\n  );\n  const serviceName = getKeychainServiceName(appleId);\n  return Keychain.setPasswordAsync({ username: appleId, password: appleIdPassword, serviceName });\n}\n"],"file":"authenticate.js"}