{"version":3,"sources":["../../../src/credentials/views/IosProvisioningProfile.ts"],"names":["RemoveProvisioningProfile","constructor","accountName","shouldRevoke","nonInteractive","open","ctx","credentials","ios","getAllCredentials","selected","selectProfileFromExpo","app","experienceName","bundleIdentifier","removeSpecific","chalk","green","deleteProvisioningProfile","revoke","type","name","message","ensureAppleCtx","ppManager","ProvisioningProfileManager","appleCtx","CreateProvisioningProfile","create","provisioningProfile","provideOrGenerate","updateProvisioningProfile","appCredentials","getAppCredentials","userProvided","provisioningProfileSchema","yellow","provisioningProfileUtils","readAppleTeam","distCert","getDistCert","generateProvisioningProfile","UseExistingProvisioningProfile","selectProfileFromApple","configureAndUpdateProvisioningProfile","CreateOrReuseProvisioningProfile","choosePreferred","profiles","profileWithSameCert","find","profile","certificates","some","cert","id","certId","user","Error","hasAppleCtx","existingProfiles","list","length","autoselectedProfile","confirmQuestion","formatProvisioningProfileFromApple","pageSize","Infinity","confirm","_createOrReuse","provisioningProfileId","choices","value","question","action","log","warn","map","entry","index","credentialsIndex","iosCredentials","filter","getName","teamId","manager","team","inHouse","profileName","Date","toISOString","validateProfileWithoutApple","spinner","start","base64EncodedProfile","fail","buffer","Buffer","from","toString","profilePlist","plist","parse","distCertFingerprint","PKCS12Utils","getP12CertFingerprint","certP12","certPassword","IosCodeSigning","validateProvisioningProfile","e","isExpired","succeed","getAppleInfo","profilesFromApple","configuredProfileFromApple","appleProfile","profileFromApple","updatedProfile","useExisting","projectName","appleInfo","expires","expireString","toDateString","details","getProvisioningProfileFromParams","provisioningProfilePath","fs","readFile","useProvisioningProfileFromParams","isValid"],"mappings":"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","sourcesContent":["import plist, { PlistObject } from '@expo/plist';\nimport { IosCodeSigning, PKCS12Utils } from '@expo/xdl';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport invariant from 'invariant';\nimport ora from 'ora';\n\nimport {\n  AppleCtx,\n  DistCert,\n  ProvisioningProfile,\n  ProvisioningProfileInfo,\n  ProvisioningProfileManager,\n} from '../../appleApi';\nimport log from '../../log';\nimport prompt, { Question } from '../../prompt';\nimport { displayIosAppCredentials } from '../actions/list';\nimport { askForUserProvided } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosDistCredentials,\n  provisioningProfileSchema,\n} from '../credentials';\nimport provisioningProfileUtils from '../utils/provisioningProfile';\n\nexport class RemoveProvisioningProfile implements IView {\n  constructor(\n    private accountName: string,\n    private shouldRevoke: boolean = false,\n    private nonInteractive: boolean = false\n  ) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const selected = await selectProfileFromExpo(credentials);\n    if (selected) {\n      const app = getAppLookupParams(selected.experienceName, selected.bundleIdentifier);\n      await this.removeSpecific(ctx, app);\n      log(\n        chalk.green(\n          `Successfully removed Provisioning Profile for ${selected.experienceName} (${selected.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n\n  async removeSpecific(ctx: Context, app: AppLookupParams) {\n    log('Removing Provisioning Profile...\\n');\n    await ctx.ios.deleteProvisioningProfile(app);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (!shouldRevoke && !this.nonInteractive) {\n      const { revoke } = await prompt([\n        {\n          type: 'confirm',\n          name: 'revoke',\n          message:\n            'Do you also want to revoke this Provisioning Profile on Apple Developer Portal?',\n        },\n      ]);\n      shouldRevoke = revoke;\n    }\n\n    if (shouldRevoke) {\n      await ctx.ensureAppleCtx();\n      const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n      await ppManager.revoke(app.bundleIdentifier);\n    }\n  }\n}\n\nexport class CreateProvisioningProfile implements IView {\n  constructor(private app: AppLookupParams, private nonInteractive: boolean = false) {}\n\n  async create(ctx: Context): Promise<ProvisioningProfile> {\n    const provisioningProfile = await this.provideOrGenerate(ctx);\n    return await ctx.ios.updateProvisioningProfile(this.app, provisioningProfile);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    await this.create(ctx);\n\n    log(chalk.green('Successfully created Provisioning Profile\\n'));\n    const appCredentials = await ctx.ios.getAppCredentials(this.app);\n    displayIosAppCredentials(appCredentials);\n    log();\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<ProvisioningProfile> {\n    if (!this.nonInteractive) {\n      const userProvided = await askForUserProvided(provisioningProfileSchema);\n      if (userProvided) {\n        // userProvided profiles don't come with ProvisioningProfileId's (only accessible from Apple Portal API)\n        log(chalk.yellow('Provisioning profile: Unable to validate specified profile.'));\n        return {\n          ...userProvided,\n          ...provisioningProfileUtils.readAppleTeam(userProvided.provisioningProfile),\n        };\n      }\n    }\n    const distCert = await ctx.ios.getDistCert(this.app);\n    invariant(distCert, 'missing distribution certificate');\n    return await generateProvisioningProfile(ctx, this.app.bundleIdentifier, distCert);\n  }\n}\n\nexport class UseExistingProvisioningProfile implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    await ctx.ensureAppleCtx();\n    const selected = await selectProfileFromApple(ctx.appleCtx, this.app.bundleIdentifier);\n    if (selected) {\n      const distCert = await ctx.ios.getDistCert(this.app);\n      invariant(distCert, 'missing distribution certificate');\n\n      await configureAndUpdateProvisioningProfile(ctx, this.app, distCert, selected);\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReuseProvisioningProfile implements IView {\n  constructor(private app: AppLookupParams, private nonInteractive: boolean = false) {}\n\n  choosePreferred(\n    profiles: ProvisioningProfileInfo[],\n    distCert: IosDistCredentials\n  ): ProvisioningProfileInfo {\n    // prefer the profile that already has the same dist cert associated with it\n    const profileWithSameCert = profiles.find(profile =>\n      profile.certificates.some(cert => cert.id === distCert.certId)\n    );\n\n    // if not, just get an arbitrary profile\n    return profileWithSameCert || profiles[0];\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    if (!ctx.hasAppleCtx()) {\n      return new CreateProvisioningProfile(this.app, this.nonInteractive);\n    }\n\n    const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n    const existingProfiles = await ppManager.list(this.app.bundleIdentifier);\n\n    if (existingProfiles.length === 0) {\n      return new CreateProvisioningProfile(this.app, this.nonInteractive);\n    }\n\n    const distCert = await ctx.ios.getDistCert(this.app);\n    invariant(distCert, 'missing distribution certificate');\n\n    const autoselectedProfile = this.choosePreferred(existingProfiles, distCert);\n    // autoselect creds if we find valid certs\n    const confirmQuestion: Question = {\n      type: 'confirm',\n      name: 'confirm',\n      message: `${formatProvisioningProfileFromApple(\n        autoselectedProfile\n      )} \\n Would you like to use this profile?`,\n      pageSize: Infinity,\n    };\n\n    if (!this.nonInteractive) {\n      const { confirm } = await prompt(confirmQuestion);\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    log(`Using Provisioning Profile: ${autoselectedProfile.provisioningProfileId}`);\n    await configureAndUpdateProvisioningProfile(ctx, this.app, distCert, autoselectedProfile);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        name: '[Choose existing provisioning profile] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { name: '[Add a new provisioning profile]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'list',\n      name: 'action',\n      message: 'Select a Provisioning Profile:',\n      choices,\n      pageSize: Infinity,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      return new CreateProvisioningProfile(this.app, this.nonInteractive);\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingProvisioningProfile(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function selectProfileFromApple(\n  appleCtx: AppleCtx,\n  bundleIdentifier: string\n): Promise<ProvisioningProfileInfo | null> {\n  const ppManager = new ProvisioningProfileManager(appleCtx);\n  const profiles = await ppManager.list(bundleIdentifier);\n  if (profiles.length === 0) {\n    log.warn(\n      `There are no Provisioning Profiles available in your apple account for bundleIdentifier: ${bundleIdentifier}`\n    );\n    return null;\n  }\n\n  const question: Question = {\n    type: 'list',\n    name: 'credentialsIndex',\n    message: 'Select Provisioning Profile from the list.',\n    choices: profiles.map((entry, index) => ({\n      name: formatProvisioningProfileFromApple(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return profiles[credentialsIndex];\n}\n\nasync function selectProfileFromExpo(\n  iosCredentials: IosCredentials\n): Promise<IosAppCredentials | null> {\n  const profiles = iosCredentials.appCredentials.filter(\n    ({ credentials }) => !!credentials.provisioningProfile && !!credentials.provisioningProfileId\n  );\n  if (profiles.length === 0) {\n    log.warn('There are no Provisioning Profiles available in your account');\n    return null;\n  }\n\n  const getName = (profile: IosAppCredentials) => {\n    const id = chalk.green(profile.credentials.provisioningProfileId || '-----');\n    const teamId = profile.credentials.teamId || '------';\n    return `Provisioning Profile (ID: ${id}, Team ID: ${teamId})`;\n  };\n\n  const question: Question = {\n    type: 'list',\n    name: 'credentialsIndex',\n    message: 'Select Provisioning Profile from the list.',\n    choices: profiles.map((entry, index) => ({\n      name: getName(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return profiles[credentialsIndex];\n}\n\nasync function generateProvisioningProfile(\n  ctx: Context,\n  bundleIdentifier: string,\n  distCert: DistCert\n): Promise<ProvisioningProfile> {\n  await ctx.ensureAppleCtx();\n  const manager = new ProvisioningProfileManager(ctx.appleCtx);\n  const type = ctx.appleCtx.team.inHouse ? 'Enterprise ' : 'AppStore';\n  const profileName = `*[expo] ${bundleIdentifier} ${type} ${new Date().toISOString()}`; // Apple drops [ if its the first char (!!)\n  return await manager.create(bundleIdentifier, distCert, profileName);\n}\n\n// Best effort validation without Apple credentials\nexport async function validateProfileWithoutApple(\n  provisioningProfile: ProvisioningProfile,\n  distCert: DistCert,\n  bundleIdentifier: string\n): Promise<boolean> {\n  const spinner = ora(`Performing best effort validation of Provisioning Profile...\\n`).start();\n  const base64EncodedProfile = provisioningProfile.provisioningProfile;\n  if (!base64EncodedProfile) {\n    spinner.fail('No profile on file');\n    return false;\n  }\n\n  const buffer = Buffer.from(base64EncodedProfile, 'base64');\n  const profile = buffer.toString('utf-8');\n  const profilePlist = plist.parse(profile) as PlistObject;\n\n  try {\n    const distCertFingerprint = await PKCS12Utils.getP12CertFingerprint(\n      distCert.certP12,\n      distCert.certPassword\n    );\n\n    IosCodeSigning.validateProvisioningProfile(profilePlist, {\n      distCertFingerprint,\n      bundleIdentifier,\n    });\n  } catch (e) {\n    spinner.fail(`Provisioning profile is invalid: ${e.toString()}`);\n    return false;\n  }\n\n  const isExpired = new Date(profilePlist['ExpirationDate'] as string) <= new Date();\n  if (isExpired) {\n    spinner.fail('Provisioning profile is expired');\n    return false;\n  }\n\n  spinner.succeed('Successfully performed best effort validation of Provisioning Profile.');\n  return true;\n}\n\nexport async function getAppleInfo(\n  appleCtx: AppleCtx,\n  bundleIdentifier: string,\n  profile: ProvisioningProfile\n): Promise<ProvisioningProfileInfo | null> {\n  if (!profile.provisioningProfileId) {\n    log(\n      chalk.yellow('Provisioning Profile: cannot look up profile on Apple Servers - there is no id')\n    );\n    return null;\n  }\n\n  const spinner = ora(`Getting Provisioning Profile info from Apple's Servers...\\n`).start();\n  const ppManager = new ProvisioningProfileManager(appleCtx);\n  const profilesFromApple = await ppManager.list(bundleIdentifier);\n\n  const configuredProfileFromApple = profilesFromApple.find(\n    appleProfile => appleProfile.provisioningProfileId === profile.provisioningProfileId\n  );\n\n  if (!configuredProfileFromApple) {\n    spinner.fail(\n      `Provisioning Profile: ${profile.provisioningProfileId} does not exist on Apple Servers`\n    );\n    return null;\n  }\n\n  spinner.succeed(\n    `Successfully fetched Provisioning Profile ${profile.provisioningProfileId} from Apple Servers`\n  );\n  return configuredProfileFromApple;\n}\n\nexport async function configureAndUpdateProvisioningProfile(\n  ctx: Context,\n  app: AppLookupParams,\n  distCert: DistCert,\n  profileFromApple: ProvisioningProfileInfo\n) {\n  // configure profile on Apple's Server to use our distCert\n  const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n  const updatedProfile = await ppManager.useExisting(\n    app.bundleIdentifier,\n    profileFromApple,\n    distCert\n  );\n  log(\n    chalk.green(\n      `Successfully configured Provisioning Profile ${\n        profileFromApple.provisioningProfileId\n      } on Apple Servers with Distribution Certificate ${distCert.certId || ''}`\n    )\n  );\n\n  // Update profile on expo servers\n  await ctx.ios.updateProvisioningProfile(app, updatedProfile);\n  log(\n    chalk.green(\n      `Successfully assigned Provisioning Profile to @${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n}\n\nfunction formatProvisioningProfileFromApple(appleInfo: ProvisioningProfileInfo) {\n  const { expires, provisioningProfileId } = appleInfo;\n  const id = provisioningProfileId ?? '-----';\n  const name = appleInfo.name ?? '-----';\n  const expireString = expires ? new Date(expires * 1000).toDateString() : 'unknown';\n  const details = chalk.green(`\\n    Name: ${name}\\n    Expiry: ${expireString}`);\n  return `Provisioning Profile - ID: ${id}${details}`;\n}\n\nexport async function getProvisioningProfileFromParams(\n  provisioningProfilePath?: string\n): Promise<ProvisioningProfile | null> {\n  if (!provisioningProfilePath) {\n    return null;\n  }\n\n  const provisioningProfile = await fs.readFile(provisioningProfilePath as string, 'base64');\n  const team = provisioningProfileUtils.readAppleTeam(provisioningProfile);\n\n  return {\n    provisioningProfile,\n    ...team,\n  };\n}\n\nexport async function useProvisioningProfileFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  provisioningProfile: ProvisioningProfile\n): Promise<ProvisioningProfile> {\n  const distCert = await ctx.ios.getDistCert(app);\n  invariant(distCert, 'missing distribution certificate');\n\n  const isValid = await validateProfileWithoutApple(\n    provisioningProfile,\n    distCert,\n    app.bundleIdentifier\n  );\n  if (!isValid) {\n    throw new Error('Specified invalid Provisioning Profile');\n  }\n\n  return await ctx.ios.updateProvisioningProfile(app, provisioningProfile);\n}\n"],"file":"IosProvisioningProfile.js"}