{"version":3,"sources":["../../../src/credentials/views/IosDistCert.ts"],"names":["APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR","chalk","underline","CreateIosDist","constructor","accountName","nonInteractive","create","ctx","newDistCert","provideOrGenerate","ios","createDistCert","open","distCert","green","userProvided","promptForDistCert","isValid","validateDistributionCertificate","generateDistCert","RemoveIosDist","shouldRevoke","selected","selectDistCertFromList","removeSpecific","credentials","getAllCredentials","apps","appCredentials","filter","cred","distCredentialsId","id","appsList","map","appCred","experienceName","join","confirm","type","name","message","deleteDistCert","certId","revoke","ensureAppleCtx","DistCertManager","appleCtx","appLookupParams","bundleIdentifier","getProvisioningProfile","view","RemoveProvisioningProfile","UpdateIosDist","updateSpecific","updated","userCredentials","find","i","length","question","updateDistCert","UseExistingDistributionCert","app","filterInvalid","useDistCert","projectName","CreateOrReuseDistributionCert","assignDistCert","userCredentialsId","user","Error","existingCertificates","getValidDistCerts","autoselectedCertificate","confirmQuestion","formatDistCert","pageSize","Infinity","_createOrReuse","choices","value","action","iosCredentials","distCerts","hasAppleCtx","yellow","distCertManager","certInfoFromApple","list","validCerts","filterRevokedDistributionCerts","sortByExpiryDesc","getValidityStatus","validDistCerts","includes","options","log","warn","entry","index","credentialsIndex","formatDistCertFromApple","appleInfo","joinApps","usedByString","gray","status","expires","created","ownerName","serialNumber","expiresDate","Date","createdDate","ownerId","validityStatus","distCertSerialNumber","IosCodeSigning","findP12CertSerialNumber","certP12","certPassword","error","red","validityText","teamId","manager","e","code","certs","usedByExpo","cert","reduce","acc","here","grey","certInfo","_getRequiredQuestions","requiredQuestions","distCertSchema","required","q","_ensureDistCert","partialCert","team","_getDistCertWithSerial","distributionCert","spinner","start","validDistributionCerts","isValidCert","successMsg","succeed","failureMsg","fail","distributionCerts","validCertSerialsOnAppleServer","Math","floor","now","sort","certA","certB","certAInfo","certAExpiry","Number","NEGATIVE_INFINITY","certBInfo","certBExpiry","getDistCertFromParams","builderOptions","distP12Path","process","env","EXPO_IOS_DIST_P12_PASSWORD","fs","readFile","useDistCertFromParams","iosDistCredentials"],"mappings":"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","sourcesContent":["import { IosCodeSigning } from '@expo/xdl';\nimport chalk from 'chalk';\nimport dateformat from 'dateformat';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport terminalLink from 'terminal-link';\n\nimport { DistCert, DistCertInfo, DistCertManager, isDistCert } from '../../appleApi';\nimport log from '../../log';\nimport prompt, { Question } from '../../prompt';\nimport { displayIosUserCredentials } from '../actions/list';\nimport { CredentialSchema, askForUserProvided } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport { IosCredentials, IosDistCredentials, distCertSchema } from '../credentials';\nimport { RemoveProvisioningProfile } from './IosProvisioningProfile';\n\nconst APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline(\n  'three'\n)} Apple Distribution Certificates generated on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Distribution Certificates are not application specific!\n`;\n\nexport class CreateIosDist implements IView {\n  constructor(private accountName: string, private nonInteractive: boolean = false) {}\n\n  async create(ctx: Context): Promise<IosDistCredentials> {\n    const newDistCert = await this.provideOrGenerate(ctx);\n    return await ctx.ios.createDistCert(this.accountName, newDistCert);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const distCert = await this.create(ctx);\n\n    log(chalk.green('Successfully created Distribution Certificate\\n'));\n    displayIosUserCredentials(distCert);\n    log();\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<DistCert> {\n    if (!this.nonInteractive) {\n      const userProvided = await promptForDistCert(ctx);\n      if (userProvided) {\n        const isValid = await validateDistributionCertificate(ctx, userProvided);\n        return isValid ? userProvided : await this.provideOrGenerate(ctx);\n      }\n    }\n    return await generateDistCert(ctx, this.accountName);\n  }\n}\n\nexport class RemoveIosDist implements IView {\n  constructor(\n    private accountName: string,\n    private shouldRevoke: boolean = false,\n    private nonInteractive: boolean = false\n  ) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.accountName);\n    if (selected) {\n      await this.removeSpecific(ctx, selected);\n      log(chalk.green('Successfully removed Distribution Certificate\\n'));\n    }\n    return null;\n  }\n\n  async removeSpecific(ctx: Context, selected: IosDistCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = credentials.appCredentials.filter(cred => cred.distCredentialsId === selected.id);\n    const appsList = apps.map(appCred => chalk.green(appCred.experienceName)).join(', ');\n\n    if (appsList && !this.nonInteractive) {\n      log('Removing Distribution Certificate');\n      const { confirm } = await prompt([\n        {\n          type: 'confirm',\n          name: 'confirm',\n          message: `You are removing certificate used by ${appsList}. Do you want to continue?`,\n        },\n      ]);\n      if (!confirm) {\n        log('Aborting');\n        return;\n      }\n    }\n\n    log('Removing Distribution Certificate...\\n');\n    await ctx.ios.deleteDistCert(selected.id, this.accountName);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (selected.certId) {\n      if (!shouldRevoke && !this.nonInteractive) {\n        const { revoke } = await prompt([\n          {\n            type: 'confirm',\n            name: 'revoke',\n            message: `Do you also want to revoke it on Apple Developer Portal?`,\n          },\n        ]);\n        shouldRevoke = revoke;\n      }\n\n      if (shouldRevoke) {\n        await ctx.ensureAppleCtx();\n        await new DistCertManager(ctx.appleCtx).revoke([selected.certId]);\n      }\n    }\n\n    for (const appCredentials of apps) {\n      const appLookupParams = getAppLookupParams(\n        appCredentials.experienceName,\n        appCredentials.bundleIdentifier\n      );\n      if (!(await ctx.ios.getProvisioningProfile(appLookupParams))) {\n        continue;\n      }\n      log(\n        `Removing Provisioning Profile for ${appCredentials.experienceName} (${appCredentials.bundleIdentifier})`\n      );\n      const view = new RemoveProvisioningProfile(\n        this.accountName,\n        shouldRevoke,\n        this.nonInteractive\n      );\n      await view.removeSpecific(ctx, appLookupParams);\n    }\n  }\n}\n\nexport class UpdateIosDist implements IView {\n  constructor(private accountName: string) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.accountName);\n    if (selected) {\n      await this.updateSpecific(ctx, selected);\n\n      log(chalk.green('Successfully updated Distribution Certificate\\n'));\n      const credentials = await ctx.ios.getAllCredentials(this.accountName);\n      const updated = credentials.userCredentials.find(i => i.id === selected.id);\n      if (updated) {\n        displayIosUserCredentials(updated);\n      }\n      log();\n    }\n    return null;\n  }\n\n  async updateSpecific(ctx: Context, selected: IosDistCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = credentials.appCredentials.filter(cred => cred.distCredentialsId === selected.id);\n    const appsList = apps.map(appCred => chalk.green(appCred.experienceName)).join(', ');\n\n    if (apps.length > 1) {\n      const question: Question = {\n        type: 'confirm',\n        name: 'confirm',\n        message: `You are updating certificate used by ${appsList}. Do you want to continue?`,\n      };\n      const { confirm } = await prompt(question);\n      if (!confirm) {\n        log('Aborting update process');\n        return;\n      }\n    }\n\n    const newDistCert = await this.provideOrGenerate(ctx);\n    await ctx.ios.updateDistCert(selected.id, this.accountName, newDistCert);\n\n    for (const appCredentials of apps) {\n      log(\n        `Removing Provisioning Profile for ${appCredentials.experienceName} (${appCredentials.bundleIdentifier})`\n      );\n      const appLookupParams = getAppLookupParams(\n        appCredentials.experienceName,\n        appCredentials.bundleIdentifier\n      );\n      await new RemoveProvisioningProfile(this.accountName, true).removeSpecific(\n        ctx,\n        appLookupParams\n      );\n    }\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<DistCert> {\n    const userProvided = await promptForDistCert(ctx);\n    if (userProvided) {\n      const isValid = await validateDistributionCertificate(ctx, userProvided);\n      return isValid ? userProvided : await this.provideOrGenerate(ctx);\n    }\n    return await generateDistCert(ctx, this.accountName);\n  }\n}\n\nexport class UseExistingDistributionCert implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.app.accountName, {\n      filterInvalid: true,\n    });\n    if (selected) {\n      await ctx.ios.useDistCert(this.app, selected.id);\n      log(\n        chalk.green(\n          `Successfully assigned Distribution Certificate to @${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReuseDistributionCert implements IView {\n  constructor(private app: AppLookupParams, private nonInteractive: boolean = false) {}\n\n  async assignDistCert(ctx: Context, userCredentialsId: number) {\n    await ctx.ios.useDistCert(this.app, userCredentialsId);\n    log(\n      chalk.green(\n        `Successfully assigned Distribution Certificate to @${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n      )\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const existingCertificates = await getValidDistCerts(\n      await ctx.ios.getAllCredentials(this.app.accountName),\n      ctx\n    );\n\n    if (existingCertificates.length === 0) {\n      const distCert = await new CreateIosDist(this.app.accountName, this.nonInteractive).create(\n        ctx\n      );\n      await this.assignDistCert(ctx, distCert.id);\n      return null;\n    }\n\n    // autoselect creds if we find valid certs\n    const autoselectedCertificate = existingCertificates[0];\n    const confirmQuestion: Question = {\n      type: 'confirm',\n      name: 'confirm',\n      message: `${formatDistCert(\n        autoselectedCertificate,\n        await ctx.ios.getAllCredentials(this.app.accountName),\n        'VALID'\n      )} \\n Would you like to use this certificate?`,\n      pageSize: Infinity,\n    };\n\n    if (!this.nonInteractive) {\n      const { confirm } = await prompt(confirmQuestion);\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    // Use autosuggested push key\n    log(`Using Distribution Certificate: ${autoselectedCertificate.certId || '-----'}`);\n    await this.assignDistCert(ctx, autoselectedCertificate.id);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        name: '[Choose existing certificate] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { name: '[Add a new certificate]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'list',\n      name: 'action',\n      message: 'Select an iOS distribution certificate to use for code signing:',\n      choices,\n      pageSize: Infinity,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      const distCert = await new CreateIosDist(this.app.accountName, this.nonInteractive).create(\n        ctx\n      );\n      await this.assignDistCert(ctx, distCert.id);\n      return null;\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingDistributionCert(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function getValidDistCerts(iosCredentials: IosCredentials, ctx: Context) {\n  const distCerts = iosCredentials.userCredentials.filter(\n    (cred): cred is IosDistCredentials => cred.type === 'dist-cert'\n  );\n  if (!ctx.hasAppleCtx()) {\n    log(chalk.yellow(`Unable to determine validity of Distribution Certificates.`));\n    return distCerts;\n  }\n  const distCertManager = new DistCertManager(ctx.appleCtx);\n  const certInfoFromApple = await distCertManager.list();\n  const validCerts = await filterRevokedDistributionCerts<IosDistCredentials>(\n    certInfoFromApple,\n    distCerts\n  );\n  return sortByExpiryDesc(certInfoFromApple, validCerts);\n}\n\nfunction getValidityStatus(\n  distCert: IosDistCredentials,\n  validDistCerts: IosDistCredentials[] | null\n): ValidityStatus {\n  if (!validDistCerts) {\n    return 'UNKNOWN';\n  }\n  return validDistCerts.includes(distCert) ? 'VALID' : 'INVALID';\n}\n\ntype ListOptions = {\n  filterInvalid?: boolean;\n};\n\nasync function selectDistCertFromList(\n  ctx: Context,\n  accountName: string,\n  options: ListOptions = {}\n): Promise<IosDistCredentials | null> {\n  const iosCredentials = await ctx.ios.getAllCredentials(accountName);\n  let distCerts = iosCredentials.userCredentials.filter(\n    (cred): cred is IosDistCredentials => cred.type === 'dist-cert'\n  );\n  let validDistCerts: IosDistCredentials[] | null = null;\n  if (ctx.hasAppleCtx()) {\n    const distCertManager = new DistCertManager(ctx.appleCtx);\n    const certInfoFromApple = await distCertManager.list();\n    validDistCerts = await filterRevokedDistributionCerts<IosDistCredentials>(\n      certInfoFromApple,\n      distCerts\n    );\n  }\n  distCerts = options.filterInvalid && validDistCerts ? validDistCerts : distCerts;\n\n  if (distCerts.length === 0) {\n    log.warn('There are no Distribution Certificates available in your expo account');\n    return null;\n  }\n\n  const question: Question = {\n    type: 'list',\n    name: 'credentialsIndex',\n    message: 'Select certificate from the list.',\n    choices: distCerts.map((entry, index) => ({\n      name: formatDistCert(entry, iosCredentials, getValidityStatus(entry, validDistCerts)),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return distCerts[credentialsIndex];\n}\n\nfunction formatDistCertFromApple(appleInfo: DistCertInfo, credentials: IosCredentials): string {\n  const userCredentials = credentials.userCredentials.filter(\n    cred => cred.type === 'dist-cert' && cred.certId === appleInfo.id\n  );\n  const appCredentials =\n    userCredentials.length !== 0\n      ? credentials.appCredentials.filter(cred => cred.distCredentialsId === userCredentials[0].id)\n      : [];\n  const joinApps = appCredentials\n    .map(i => `      ${i.experienceName} (${i.bundleIdentifier})`)\n    .join('\\n');\n\n  const usedByString = joinApps\n    ? `    ${chalk.gray(`used by\\n${joinApps}`)}`\n    : `    ${chalk.gray(`not used by any apps`)}`;\n\n  const { name, status, id, expires, created, ownerName, serialNumber } = appleInfo;\n  const expiresDate = dateformat(new Date(expires * 1000));\n  const createdDate = dateformat(new Date(created * 1000));\n  return `${name} (${status}) - Cert ID: ${id}, Serial number: ${serialNumber}, Team ID: ${appleInfo.ownerId}, Team name: ${ownerName}\n    expires: ${expiresDate}, created: ${createdDate}\n  ${usedByString}`;\n}\n\ntype ValidityStatus = 'UNKNOWN' | 'VALID' | 'INVALID';\nfunction formatDistCert(\n  distCert: IosDistCredentials,\n  credentials: IosCredentials,\n  validityStatus: ValidityStatus = 'UNKNOWN'\n): string {\n  const appCredentials = credentials.appCredentials.filter(\n    cred => cred.distCredentialsId === distCert.id\n  );\n  const joinApps = appCredentials\n    .map(i => `${i.experienceName} (${i.bundleIdentifier})`)\n    .join(', ');\n\n  const usedByString = joinApps\n    ? `\\n    ${chalk.gray(`used by ${joinApps}`)}`\n    : `\\n    ${chalk.gray(`not used by any apps`)}`;\n\n  let serialNumber = distCert.distCertSerialNumber;\n  try {\n    if (!serialNumber) {\n      serialNumber = IosCodeSigning.findP12CertSerialNumber(\n        distCert.certP12,\n        distCert.certPassword\n      );\n    }\n  } catch (error) {\n    serialNumber = chalk.red('invalid serial number');\n  }\n\n  let validityText;\n  if (validityStatus === 'VALID') {\n    validityText = chalk.gray(\"\\n    ✅ Currently valid on Apple's servers.\");\n  } else if (validityStatus === 'INVALID') {\n    validityText = chalk.gray(\"\\n    ❌ No longer valid on Apple's servers.\");\n  } else {\n    validityText = chalk.gray(\n      \"\\n    ❓ Validity of this certificate on Apple's servers is unknown.\"\n    );\n  }\n  return `Distribution Certificate (Cert ID: ${\n    distCert.certId || '-----'\n  }, Serial number: ${serialNumber}, Team ID: ${distCert.teamId})${usedByString}${validityText}`;\n}\n\nasync function generateDistCert(ctx: Context, accountName: string): Promise<DistCert> {\n  await ctx.ensureAppleCtx();\n  const manager = new DistCertManager(ctx.appleCtx);\n  try {\n    return await manager.create();\n  } catch (e) {\n    if (e.code === 'APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR') {\n      const certs = await manager.list();\n      log.warn('Maximum number of Distribution Certificates generated on Apple Developer Portal.');\n      log.warn(APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR);\n      const credentials = await ctx.ios.getAllCredentials(accountName);\n      const usedByExpo = credentials.userCredentials\n        .filter((cert): cert is IosDistCredentials => cert.type === 'dist-cert' && !!cert.certId)\n        .reduce<{ [key: string]: IosDistCredentials }>(\n          (acc, cert) => ({ ...acc, [cert.certId || '']: cert }),\n          {}\n        );\n\n      // https://docs.expo.io/distribution/app-signing/#summary\n      const here = terminalLink('here', 'https://bit.ly/3cfJJkQ');\n      log(\n        chalk.grey(`✅  Distribution Certificates can be revoked with no production side effects`)\n      );\n      log(chalk.grey(`ℹ️  Learn more ${here}`));\n      log();\n\n      const { revoke } = await prompt([\n        {\n          type: 'checkbox',\n          name: 'revoke',\n          message: 'Select certificates to revoke.',\n          choices: certs.map((cert, index) => ({\n            value: index,\n            name: formatDistCertFromApple(cert, credentials),\n          })),\n          pageSize: Infinity,\n        },\n      ]);\n\n      for (const index of revoke) {\n        const certInfo = certs[index];\n        if (certInfo && usedByExpo[certInfo.id]) {\n          await new RemoveIosDist(accountName, true).removeSpecific(ctx, usedByExpo[certInfo.id]);\n        } else {\n          await manager.revoke([certInfo.id]);\n        }\n      }\n    } else {\n      throw e;\n    }\n  }\n  return await generateDistCert(ctx, accountName);\n}\n\nfunction _getRequiredQuestions(ctx: Context): CredentialSchema<DistCert> {\n  const requiredQuestions = { ...distCertSchema };\n  if (ctx.hasAppleCtx() && requiredQuestions.required) {\n    requiredQuestions.required = requiredQuestions.required.filter(q => q !== 'teamId');\n  }\n  return requiredQuestions;\n}\n\nfunction _ensureDistCert(ctx: Context, partialCert: Partial<DistCert>): DistCert {\n  if (ctx.hasAppleCtx()) {\n    partialCert.teamId = ctx.appleCtx.team.id;\n  }\n  if (!isDistCert(partialCert)) {\n    throw new Error(`Not of type DistCert: ${partialCert}`);\n  }\n  return partialCert;\n}\n\nasync function promptForDistCert(ctx: Context): Promise<DistCert | null> {\n  const requiredQuestions = _getRequiredQuestions(ctx);\n  const userProvided = await askForUserProvided(requiredQuestions);\n  if (userProvided) {\n    const distCert = _ensureDistCert(ctx, userProvided);\n    return await _getDistCertWithSerial(distCert);\n  } else {\n    return null;\n  }\n}\n\nasync function _getDistCertWithSerial(distCert: DistCert): Promise<DistCert> {\n  try {\n    distCert.distCertSerialNumber = IosCodeSigning.findP12CertSerialNumber(\n      distCert.certP12,\n      distCert.certPassword\n    );\n  } catch (error) {\n    log.warn('Unable to access certificate serial number.');\n    log.warn('Make sure that certificate and password are correct.');\n    log.warn(error);\n  }\n  return distCert;\n}\n\nexport async function validateDistributionCertificate(ctx: Context, distributionCert: DistCert) {\n  if (!ctx.hasAppleCtx()) {\n    log.warn('Unable to validate distribution certificate due to insufficient Apple Credentials');\n    return true;\n  }\n  const spinner = ora(\n    `Checking validity of distribution certificate on Apple Developer Portal...`\n  ).start();\n\n  const distCertManager = new DistCertManager(ctx.appleCtx);\n  const certInfoFromApple = await distCertManager.list();\n  const validDistributionCerts = await filterRevokedDistributionCerts(certInfoFromApple, [\n    distributionCert,\n  ]);\n  const isValidCert = validDistributionCerts.length > 0;\n  if (isValidCert) {\n    const successMsg = `Successfully validated Distribution Certificate against Apple Servers`;\n    spinner.succeed(successMsg);\n  } else {\n    const failureMsg = `The Distribution Certificate is no longer valid on the Apple Developer Portal`;\n    spinner.fail(failureMsg);\n  }\n  return isValidCert;\n}\n\nasync function filterRevokedDistributionCerts<T extends DistCert>(\n  certInfoFromApple: DistCertInfo[],\n  distributionCerts: T[]\n): Promise<T[]> {\n  if (distributionCerts.length === 0) {\n    return [];\n  }\n\n  // if the credentials are valid, check it against apple to make sure it hasnt been revoked\n  const validCertSerialsOnAppleServer = certInfoFromApple\n    .filter(\n      // remove expired certs\n      cert => cert.expires > Math.floor(Date.now() / 1000)\n    )\n    .map(cert => cert.serialNumber);\n  const validDistributionCerts = distributionCerts.filter(cert => {\n    const serialNumber = cert.distCertSerialNumber;\n    if (!serialNumber) {\n      return false;\n    }\n    return validCertSerialsOnAppleServer.includes(serialNumber);\n  });\n  return validDistributionCerts;\n}\n\nfunction sortByExpiryDesc<T extends DistCert>(\n  certInfoFromApple: DistCertInfo[],\n  distributionCerts: T[]\n): T[] {\n  return distributionCerts.sort((certA, certB) => {\n    const certAInfo = certInfoFromApple.find(cert => cert.id === certA.certId);\n    const certAExpiry = certAInfo ? certAInfo.expires : Number.NEGATIVE_INFINITY;\n    const certBInfo = certInfoFromApple.find(cert => cert.id === certB.certId);\n    const certBExpiry = certBInfo ? certBInfo.expires : Number.NEGATIVE_INFINITY;\n    return certBExpiry - certAExpiry;\n  });\n}\n\nexport async function getDistCertFromParams(builderOptions: {\n  distP12Path?: string;\n  teamId?: string;\n}): Promise<DistCert | null> {\n  const { distP12Path, teamId } = builderOptions;\n  const certPassword = process.env.EXPO_IOS_DIST_P12_PASSWORD;\n\n  // none of the distCert params were set, assume user has no intention of passing it in\n  if (!distP12Path && !certPassword) {\n    return null;\n  }\n\n  // partial distCert params were set, assume user has intention of passing it in\n  if (!(distP12Path && certPassword && teamId)) {\n    throw new Error(\n      'In order to provide a Distribution Certificate through the CLI parameters, you have to pass --dist-p12-path parameter, --team-id parameter and set EXPO_IOS_DIST_P12_PASSWORD environment variable.'\n    );\n  }\n\n  const distCert = {\n    certP12: await fs.readFile(distP12Path as string, 'base64'),\n    teamId,\n    certPassword,\n  } as DistCert;\n  return await _getDistCertWithSerial(distCert);\n}\n\nexport async function useDistCertFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  distCert: DistCert\n): Promise<IosDistCredentials> {\n  const isValid = await validateDistributionCertificate(ctx, distCert);\n  if (!isValid) {\n    throw new Error('Cannot validate uploaded Distribution Certificate');\n  }\n  const iosDistCredentials = await ctx.ios.createDistCert(app.accountName, distCert);\n\n  await ctx.ios.useDistCert(app, iosDistCredentials.id);\n  log(\n    chalk.green(\n      `Successfully assigned Distribution Certificate to @${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n  return iosDistCredentials;\n}\n"],"file":"IosDistCert.js"}