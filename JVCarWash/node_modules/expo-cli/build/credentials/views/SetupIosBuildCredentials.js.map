{"version":3,"sources":["../../../src/credentials/views/SetupIosBuildCredentials.ts"],"names":["SetupIosBuildCredentials","constructor","app","open","ctx","bestEffortAppleCtx","hasAppleCtx","appleApi","ensureAppExists","appleCtx","enablePushNotifications","SetupIosDist","error","log","distCert","ios","getDistCert","CommandError","SetupIosProvisioningProfile","nonInteractive","confirm","type","name","message","ensureAppleCtx","chalk","green","SetupIosBuildCredentialsFromLocal","localCredentials","credentialsJsonReader","readIosCredentialsAsync","projectDir","team","provisioningProfile","updateProvisioningProfile","credentials","getAllCredentials","accountName","appsUsingCert","id","appCredentials","filter","cred","distCredentialsId","appInfo","projectName","bundleIdentifier","newDistCert","certP12","distributionCertificate","certPassword","length","update","choices","title","value","updateDistCert","createdDistCert","createDistCert","useDistCert"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\n\nimport CommandError from '../../CommandError';\nimport * as appleApi from '../../appleApi';\nimport log from '../../log';\nimport prompts from '../../prompts';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport * as credentialsJsonReader from '../credentialsJson/read';\nimport { runCredentialsManager } from '../route';\nimport { readAppleTeam } from '../utils/provisioningProfile';\nimport { SetupIosDist } from './SetupIosDist';\nimport { SetupIosProvisioningProfile } from './SetupIosProvisioningProfile';\n\nexport class SetupIosBuildCredentials implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    await this.bestEffortAppleCtx(ctx);\n\n    if (ctx.hasAppleCtx()) {\n      await appleApi.ensureAppExists(ctx.appleCtx, this.app, { enablePushNotifications: true });\n    }\n    try {\n      await runCredentialsManager(ctx, new SetupIosDist(this.app));\n    } catch (error) {\n      log.error('Failed to set up Distribution Certificate');\n      throw error;\n    }\n\n    const distCert = await ctx.ios.getDistCert(this.app);\n    if (!distCert) {\n      throw new CommandError(\n        'INSUFFICIENT_CREDENTIALS',\n        `This build request requires a valid distribution certificate.`\n      );\n    }\n\n    try {\n      await runCredentialsManager(ctx, new SetupIosProvisioningProfile(this.app));\n    } catch (error) {\n      log.error('Failed to set up Provisioning Profile');\n      throw error;\n    }\n\n    return null;\n  }\n\n  // Try to get the user to provide Apple credentials upfront\n  // We will be able to do full validation of their iOS creds this way\n  async bestEffortAppleCtx(ctx: Context): Promise<void> {\n    if (ctx.hasAppleCtx()) {\n      // skip prompts if already have apple ctx\n      return;\n    }\n\n    if (ctx.nonInteractive) {\n      return;\n    }\n\n    const { confirm } = await prompts([\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: `Do you have access to the Apple account that will be used for submitting this app to the App Store?`,\n      },\n    ]);\n    if (confirm) {\n      return await ctx.ensureAppleCtx();\n    } else {\n      log(\n        chalk.green(\n          'No problem! ðŸ‘Œ \\nWe canâ€™t auto-generate credentials if you donâ€™t have access to the main Apple account. \\nBut we can still set it up if you upload your credentials.'\n        )\n      );\n    }\n  }\n}\n\nexport class SetupIosBuildCredentialsFromLocal implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    let localCredentials;\n    try {\n      localCredentials = await credentialsJsonReader.readIosCredentialsAsync(ctx.projectDir);\n    } catch (error) {\n      log.error(\n        'Reading credentials from credentials.json failed. Make sure this file is correct and all credentials are present there.'\n      );\n      throw error;\n    }\n\n    const team = await readAppleTeam(localCredentials.provisioningProfile);\n    await ctx.ios.updateProvisioningProfile(this.app, {\n      ...team,\n      provisioningProfile: localCredentials.provisioningProfile,\n    });\n    const credentials = await ctx.ios.getAllCredentials(this.app.accountName);\n    const distCert = await ctx.ios.getDistCert(this.app);\n    const appsUsingCert = distCert?.id\n      ? (credentials.appCredentials || []).filter(cred => cred.distCredentialsId === distCert.id)\n      : [];\n\n    const appInfo = `@${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`;\n    const newDistCert = {\n      ...team,\n      certP12: localCredentials.distributionCertificate.certP12,\n      certPassword: localCredentials.distributionCertificate.certPassword,\n    };\n\n    if (appsUsingCert.length > 1 && distCert?.id) {\n      const { update } = await prompts({\n        type: 'select',\n        name: 'update',\n        message:\n          'Current distribution certificate is used by multiple apps. Do you want to update all of them?',\n        choices: [\n          { title: 'Update all apps', value: 'all' },\n          { title: `Update only ${appInfo}`, value: 'app' },\n        ],\n      });\n      if (update === 'all') {\n        await ctx.ios.updateDistCert(distCert.id, this.app.accountName, newDistCert);\n      } else {\n        const createdDistCert = await ctx.ios.createDistCert(this.app.accountName, newDistCert);\n        await ctx.ios.useDistCert(this.app, createdDistCert.id);\n      }\n    } else if (distCert?.id) {\n      await ctx.ios.updateDistCert(distCert.id, this.app.accountName, newDistCert);\n    } else {\n      const createdDistCert = await ctx.ios.createDistCert(this.app.accountName, newDistCert);\n      await ctx.ios.useDistCert(this.app, createdDistCert.id);\n    }\n    return null;\n  }\n}\n"],"file":"SetupIosBuildCredentials.js"}