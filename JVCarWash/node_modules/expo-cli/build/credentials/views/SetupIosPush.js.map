{"version":3,"sources":["../../../src/credentials/views/SetupIosPush.ts"],"names":["SetupIosPush","constructor","app","nonInteractive","open","ctx","user","Error","appCredentials","ios","getAppCredentials","deprecatedPushId","credentials","pushId","deprecatedPushP12","pushP12","deprecatedPushPassword","pushPassword","confirmQuestion","type","name","message","pageSize","Infinity","confirm","configuredPushKey","getPushKey","isValid","iosPushView","validatePushKey","CreateOrReusePushKey"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEO,MAAMA,YAAN,CAAoC;AACzCC,EAAAA,WAAW,CAASC,GAAT,EAAuCC,cAAuB,GAAG,KAAjE,EAAwE;AAAA,SAA/DD,GAA+D,GAA/DA,GAA+D;AAAA,SAAjCC,cAAiC,GAAjCA,cAAiC;AAAE;;AAErF,QAAMC,IAAN,CAAWC,GAAX,EAAgD;AAAA;;AAC9C,QAAI,CAACA,GAAG,CAACC,IAAT,EAAe;AACb,YAAM,IAAIC,KAAJ,CAAW,6CAAX,CAAN;AACD,KAH6C,CAK9C;;;AACA,UAAMC,cAAc,GAAG,MAAMH,GAAG,CAACI,GAAJ,CAAQC,iBAAR,CAA0B,KAAKR,GAA/B,CAA7B;AACA,UAAMS,gBAAgB,GAAGH,cAAH,aAAGA,cAAH,gDAAGA,cAAc,CAAEI,WAAnB,0DAAG,sBAA6BC,MAAtD;AACA,UAAMC,iBAAiB,GAAGN,cAAH,aAAGA,cAAH,iDAAGA,cAAc,CAAEI,WAAnB,2DAAG,uBAA6BG,OAAvD;AACA,UAAMC,sBAAsB,GAAGR,cAAH,aAAGA,cAAH,iDAAGA,cAAc,CAAEI,WAAnB,2DAAG,uBAA6BK,YAA5D;;AACA,QAAIN,gBAAgB,IAAIG,iBAApB,IAAyCE,sBAA7C,EAAqE;AACnE,YAAME,eAAyB,GAAG;AAChCC,QAAAA,IAAI,EAAE,SAD0B;AAEhCC,QAAAA,IAAI,EAAE,SAF0B;AAGhCC,QAAAA,OAAO,EAAG,mGAHsB;AAIhCC,QAAAA,QAAQ,EAAEC;AAJsB,OAAlC;AAOA,YAAM;AAAEC,QAAAA;AAAF,UAAc,MAAM,wBAAON,eAAP,CAA1B;;AACA,UAAI,CAACM,OAAL,EAAc;AACZ,4BAAK,+BAA8Bb,gBAAiB,UAApD;AACA,eAAO,IAAP;AACD;AACF;;AAED,UAAMc,iBAAiB,GAAG,MAAMpB,GAAG,CAACI,GAAJ,CAAQiB,UAAR,CAAmB,KAAKxB,GAAxB,CAAhC;;AAEA,QAAIuB,iBAAJ,EAAuB;AACrB;AACA,YAAME,OAAO,GAAG,MAAMC,WAAW,GAACC,eAAZ,CAA4BxB,GAA5B,EAAiCoB,iBAAjC,CAAtB;;AACA,UAAIE,OAAJ,EAAa;AACX,eAAO,IAAP;AACD;AACF;;AAED,WAAO,KAAIC,WAAW,GAACE,oBAAhB,EAAqC,KAAK5B,GAA1C,EAA+C,KAAKC,cAApD,CAAP;AACD;;AAvCwC","sourcesContent":["import { prompt } from 'inquirer';\n\nimport log from '../../log';\nimport { Question } from '../../prompt';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport * as iosPushView from './IosPushCredentials';\n\nexport class SetupIosPush implements IView {\n  constructor(private app: AppLookupParams, private nonInteractive: boolean = false) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    // TODO: Remove this on Nov 2020 when Apple no longer accepts deprecated push certs\n    const appCredentials = await ctx.ios.getAppCredentials(this.app);\n    const deprecatedPushId = appCredentials?.credentials?.pushId;\n    const deprecatedPushP12 = appCredentials?.credentials?.pushP12;\n    const deprecatedPushPassword = appCredentials?.credentials?.pushPassword;\n    if (deprecatedPushId && deprecatedPushP12 && deprecatedPushPassword) {\n      const confirmQuestion: Question = {\n        type: 'confirm',\n        name: 'confirm',\n        message: `We've detected legacy Push Certificates on file. Would you like to upgrade to the newer standard?`,\n        pageSize: Infinity,\n      };\n\n      const { confirm } = await prompt(confirmQuestion);\n      if (!confirm) {\n        log(`Using Deprecated Push Cert: ${deprecatedPushId} on file`);\n        return null;\n      }\n    }\n\n    const configuredPushKey = await ctx.ios.getPushKey(this.app);\n\n    if (configuredPushKey) {\n      // we dont need to setup if we have a valid push key on file\n      const isValid = await iosPushView.validatePushKey(ctx, configuredPushKey);\n      if (isValid) {\n        return null;\n      }\n    }\n\n    return new iosPushView.CreateOrReusePushKey(this.app, this.nonInteractive);\n  }\n}\n"],"file":"SetupIosPush.js"}