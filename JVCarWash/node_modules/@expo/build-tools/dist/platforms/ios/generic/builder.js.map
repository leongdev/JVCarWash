{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../../../src/platforms/ios/generic/builder.ts"],"names":[],"mappings":";;;;;AAAA,gDAAwB;AAExB,8DAAsC;AACtC,sEAAuC;AAIvC,oDAA+C;AAC/C,gDAAuD;AACvD,8CAAiF;AAIjF,MAAM,OAAO,GAA2B,KAAK,UAAU,YAAY,CACjE,GAA8B;;IAE9B,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;IAE5B,MAAM,cAAc,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,CAAC;IACxC,MAAM,2BAA2B,GAAG,cAAI,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACxF,MAAM,sBAAsB,GAAG,cAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;IAE7E,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC/B,MAAM,sBAAK,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,GAAG,EAAE,sBAAsB,EAAE,MAAM,EAAE,CAAC,CAAC;IAEzE,MAAM,kBAAkB,GAAG,IAAI,mCAAqB,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACtE,IAAI;QACF,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACrC,MAAM,WAAW,GAAG,MAAM,kBAAkB,CAAC,OAAO,EAAE,CAAC;QAEvD,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAClD,MAAM,cAAc,GAAG,MAAM,2BAAwB,CAAC,WAAW,EAAE;YACjE,sBAAsB;YACtB,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,UAAU,EAAE,KAAK;YACjB,eAAe,EAAE,SAAS;SAC3B,CAAC,CAAC;QAEH,IAAI,cAAc,EAAE;YAClB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAChC;aAAM;YACL,MAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;SACvD;QAED,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC7B,MAAM,kBAAQ,CAAC,CAAC,KAAK,CAAC,EAAE;YACtB,GAAG,EAAE,sBAAsB;YAC3B,MAAM;YACN,IAAI,EAAE;gBACJ,GAAG,OAAO,CAAC,GAAG;gBACd,SAAG,GAAG,CAAC,OAAO,0CAAE,UAAU;aAC3B;SACF,CAAC,CAAC;QAEH,OAAO;YACL,gBAAgB,EAAE,2BAA2B;YAC7C,YAAY,EAAE,GAAG,CAAC,YAAY;SAC/B,CAAC;KACH;YAAS;QACR,MAAM,kBAAkB,CAAC,OAAO,EAAE,CAAC;KACpC;AACH,CAAC,CAAC;AAEF,kBAAe,OAAO,CAAC","sourcesContent":["import path from 'path';\n\nimport fastlane from '@expo/fastlane';\nimport spawn from '@expo/turtle-spawn';\n\nimport { BuilderCtx } from '../../../context';\nimport { Builder, BuildResult } from '../../../builder';\nimport { setup } from '../../../utils/project';\nimport { iOSCredentialsManager } from '../credentials';\nimport { createIfNotExists as createGymfileIfNotExists } from '../utils/gymfile';\n\nimport { GenericiOSJob } from './job';\n\nconst builder: Builder<GenericiOSJob> = async function buildGeneric(\n  ctx: BuilderCtx<GenericiOSJob>,\n): Promise<BuildResult> {\n  const { job, logger } = ctx;\n\n  const buildDirectory = await setup(ctx);\n  const reactNativeProjectDirectory = path.join(buildDirectory, job.projectRootDirectory);\n  const nativeProjectDirectory = path.join(reactNativeProjectDirectory, 'ios');\n\n  logger.info('Installing pods');\n  await spawn('pod', ['install'], { cwd: nativeProjectDirectory, logger });\n\n  const credentialsManager = new iOSCredentialsManager(ctx.logger, job);\n  try {\n    logger.info('Preparing credentials');\n    const credentials = await credentialsManager.prepare();\n\n    logger.info('Creating Gymfile if does not exist');\n    const createdGymfile = await createGymfileIfNotExists(credentials, {\n      nativeProjectDirectory,\n      scheme: job.scheme,\n      outputName: 'App',\n      outputDirectory: './build',\n    });\n\n    if (createdGymfile) {\n      logger.info('Gymfile created');\n    } else {\n      logger.info('Gymfile for the project already exists');\n    }\n\n    logger.info('Running build');\n    await fastlane(['gym'], {\n      cwd: nativeProjectDirectory,\n      logger,\n      envs: {\n        ...process.env,\n        ...job.secrets?.secretEnvs,\n      }\n    });\n\n    return {\n      projectDirectory: reactNativeProjectDirectory,\n      artifactPath: job.artifactPath,\n    };\n  } finally {\n    await credentialsManager.cleanUp();\n  }\n};\n\nexport default builder;\n"]}