{"version":3,"sources":["project/ManifestHandler.ts"],"names":["_cachedSignedManifest","manifestString","signedManifest","blacklistedEnvironmentVariables","Set","shouldExposeEnvironmentVariableInManifest","key","has","toUpperCase","startsWith","stripPort","host","URL","hostname","getPackagerOptionsAsync","projectRoot","packagerOpts","ProjectSettings","readAsync","bundleUrlPackagerOpts","JSON","parse","stringify","urlType","hostType","getBundleUrlAsync","platform","mainModuleName","queryParams","UrlUtils","constructBundleQueryParamsAsync","path","encodeURI","encodeURIComponent","constructBundleUrlAsync","getPlatformFromRequest","headers","toString","getManifestHandler","req","res","Doctor","validateWithNetworkAsync","exp","hostInfo","getManifestResponseFromHeadersAsync","sdkVersion","setHeader","end","Analytics","logEvent","developerTool","Config","e","ProjectUtils","logError","stack","statusCode","error","acceptSignature","getManifestResponseAsync","entryPoint","Exp","determineEntryPoint","guessMainModulePath","createHostInfoAsync","manifest","xde","developer","tool","env","getManifestEnvironment","bundleUrl","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","resolver","match","getManifestStringAsync","Object","keys","process","reduce","prev","hostUUID","currentSession","UserManager","getSessionAsync","offline","id","ANONYMOUS_USERNAME","slug","getUnsignedManifestString","getSignedManifestStringAsync","UserSettings","anonymousIdentifier","server","serverVersion","require","version","serverDriver","serverOS","os","serverOSVersion","release","user","ensureLoggedInAsync","response","ApiV2","clientForUser","postAsync","args","remoteUsername","owner","getCurrentUsernameAsync","remotePackageName","unsignedManifest","signature"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport express from 'express';\nimport http from 'http';\nimport os from 'os';\nimport { URL } from 'url';\n\nimport * as Analytics from '../Analytics';\nimport ApiV2 from '../ApiV2';\nimport Config from '../Config';\nimport * as Exp from '../Exp';\nimport { PublicConfig, resolveGoogleServicesFile, resolveManifestAssets } from '../ProjectAssets';\nimport * as ProjectSettings from '../ProjectSettings';\nimport * as UrlUtils from '../UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME } from '../User';\nimport UserSettings from '../UserSettings';\nimport * as Doctor from './Doctor';\nimport * as ProjectUtils from './ProjectUtils';\n\ninterface HostInfo {\n  host: string;\n  server: 'xdl';\n  serverVersion: string;\n  serverDriver: string | null;\n  serverOS: NodeJS.Platform;\n  serverOSVersion: string;\n}\n\ntype PackagerOptions = ProjectSettings.ProjectSettings;\n\ntype CachedSignedManifest =\n  | {\n      manifestString: null;\n      signedManifest: null;\n    }\n  | {\n      manifestString: string;\n      signedManifest: string;\n    };\n\nconst _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nconst blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n  'EXPO_CLI_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key: string) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nfunction stripPort(host: string | undefined): string | undefined {\n  if (!host) {\n    return host;\n  }\n  return new URL('/', `http://${host}`).hostname;\n}\n\nasync function getPackagerOptionsAsync(\n  projectRoot: string\n): Promise<[PackagerOptions, PackagerOptions]> {\n  // Get packager opts and then copy into bundleUrlPackagerOpts\n  const packagerOpts = await ProjectSettings.readAsync(projectRoot);\n  const bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n  bundleUrlPackagerOpts.urlType = 'http';\n  if (bundleUrlPackagerOpts.hostType === 'redirect') {\n    bundleUrlPackagerOpts.hostType = 'tunnel';\n  }\n  return [packagerOpts, bundleUrlPackagerOpts];\n}\n\nasync function getBundleUrlAsync({\n  projectRoot,\n  platform,\n  packagerOpts,\n  bundleUrlPackagerOpts,\n  mainModuleName,\n  hostname,\n}: {\n  platform: string;\n  hostname?: string;\n  mainModuleName: string;\n  projectRoot: string;\n  packagerOpts: PackagerOptions;\n  bundleUrlPackagerOpts: PackagerOptions;\n}): Promise<string> {\n  const queryParams = await UrlUtils.constructBundleQueryParamsAsync(projectRoot, packagerOpts);\n\n  const path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n    platform\n  )}&${queryParams}`;\n\n  return (\n    (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, hostname)) + path\n  );\n}\n\nfunction getPlatformFromRequest(headers: http.IncomingHttpHeaders): string {\n  return (headers['exponent-platform'] || 'ios').toString();\n}\n\nexport function getManifestHandler(projectRoot: string) {\n  return async (\n    req: express.Request | http.IncomingMessage,\n    res: express.Response | http.ServerResponse\n  ) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n\n      const { manifestString, exp, hostInfo } = await getManifestResponseFromHeadersAsync({\n        projectRoot,\n        headers: req.headers,\n      });\n      const sdkVersion = exp.sdkVersion ?? null;\n\n      // Send the response\n      res.setHeader('Exponent-Server', JSON.stringify(hostInfo));\n      // End the request\n      res.end(manifestString);\n\n      // Log analytics\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n        sdkVersion,\n      });\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      // 5xx = Server Error HTTP code\n      res.statusCode = 520;\n      res.end(\n        JSON.stringify({\n          error: e.toString(),\n        })\n      );\n    }\n  };\n}\n\nasync function getManifestResponseFromHeadersAsync({\n  projectRoot,\n  headers,\n}: {\n  projectRoot: string;\n  headers: http.IncomingHttpHeaders;\n}): Promise<{ exp: ExpoConfig; manifestString: string; hostInfo: HostInfo }> {\n  // Read from headers\n  const platform = getPlatformFromRequest(headers);\n  const acceptSignature = headers['exponent-accept-signature'];\n  return getManifestResponseAsync({ projectRoot, host: headers.host, platform, acceptSignature });\n}\n\nexport async function getManifestResponseAsync({\n  projectRoot,\n  host,\n  platform,\n  acceptSignature,\n}: {\n  projectRoot: string;\n  platform: string;\n  host?: string;\n  acceptSignature?: string | string[];\n}): Promise<{ exp: ExpoConfig; manifestString: string; hostInfo: HostInfo }> {\n  // Read from headers\n  const hostname = stripPort(host);\n\n  // Get project entry point and initial module\n  const entryPoint = Exp.determineEntryPoint(projectRoot, platform);\n  const mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n\n  // Gather packager and host info\n  const hostInfo = await createHostInfoAsync();\n  const [packagerOpts, bundleUrlPackagerOpts] = await getPackagerOptionsAsync(projectRoot);\n\n  // Read the config\n  const { exp: manifest } = getConfig(projectRoot);\n\n  // Mutate the manifest\n  manifest.xde = true; // deprecated\n  manifest.developer = {\n    tool: Config.developerTool,\n    projectRoot,\n  };\n  manifest.packagerOpts = packagerOpts;\n  manifest.mainModuleName = mainModuleName;\n  manifest.env = getManifestEnvironment();\n  // Add URLs to the manifest\n  manifest.bundleUrl = await getBundleUrlAsync({\n    projectRoot,\n    platform,\n    packagerOpts,\n    bundleUrlPackagerOpts,\n    mainModuleName,\n    hostname,\n  });\n  manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, hostname);\n  manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, hostname);\n  manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, hostname);\n\n  // Resolve all assets and set them on the manifest as URLs\n  await resolveManifestAssets({\n    projectRoot,\n    manifest: manifest as PublicConfig,\n    async resolver(path) {\n      return manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path;\n    },\n  });\n\n  // The server normally inserts this but if we're offline we'll do it here\n  await resolveGoogleServicesFile(projectRoot, manifest);\n\n  // Create the final string\n  const manifestString = await getManifestStringAsync(manifest, hostInfo.host, acceptSignature);\n\n  return {\n    manifestString,\n    exp: manifest,\n    hostInfo,\n  };\n}\n\nfunction getManifestEnvironment(): Record<string, any> {\n  return Object.keys(process.env).reduce<Record<string, any>>((prev, key) => {\n    if (shouldExposeEnvironmentVariableInManifest(key)) {\n      prev[key] = process.env[key];\n    }\n    return prev;\n  }, {});\n}\n\nasync function getManifestStringAsync(\n  manifest: ExpoConfig,\n  hostUUID: string,\n  acceptSignature?: string | string[]\n): Promise<string> {\n  const currentSession = await UserManager.getSessionAsync();\n  if (!currentSession || Config.offline) {\n    manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n  }\n  if (acceptSignature) {\n    return !currentSession || Config.offline\n      ? getUnsignedManifestString(manifest)\n      : await getSignedManifestStringAsync(manifest, currentSession);\n  } else {\n    return JSON.stringify(manifest);\n  }\n}\n\nasync function createHostInfoAsync(): Promise<HostInfo> {\n  const host = await UserSettings.anonymousIdentifier();\n\n  return {\n    host,\n    server: 'xdl',\n    serverVersion: require('@expo/xdl/package.json').version,\n    serverDriver: Config.developerTool,\n    serverOS: os.platform(),\n    serverOSVersion: os.release(),\n  };\n}\n\nexport async function getSignedManifestStringAsync(\n  manifest: ExpoConfig,\n  // NOTE: we currently ignore the currentSession that is passed in, see the note below about analytics.\n  currentSession: { sessionSecret?: string; accessToken?: string }\n) {\n  const manifestString = JSON.stringify(manifest);\n  if (_cachedSignedManifest.manifestString === manifestString) {\n    return _cachedSignedManifest.signedManifest;\n  }\n  // WARNING: Removing the following line will regress analytics, see: https://github.com/expo/expo-cli/pull/2357\n  // TODO: make this more obvious from code\n  const user = await UserManager.ensureLoggedInAsync();\n  const { response } = await ApiV2.clientForUser(user).postAsync('manifest/sign', {\n    args: {\n      remoteUsername: manifest.owner ?? (await UserManager.getCurrentUsernameAsync()),\n      remotePackageName: manifest.slug,\n    },\n    manifest,\n  });\n  _cachedSignedManifest.manifestString = manifestString;\n  _cachedSignedManifest.signedManifest = response;\n  return response;\n}\n\nexport function getUnsignedManifestString(manifest: ExpoConfig) {\n  const unsignedManifest = {\n    manifestString: JSON.stringify(manifest),\n    signature: 'UNSIGNED',\n  };\n  return JSON.stringify(unsignedManifest);\n}\n"],"file":"../../project/ManifestHandler.js","sourceRoot":"/@expo/xdl@58.0.3/src"}